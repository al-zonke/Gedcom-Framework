/*
 This file was autogenerated by tags.py 
 */

#import "GCDataAttribute.h"

#import "GCObject_internal.h"
#import "GCProperty_internal.h"

#import "GCDateAttribute.h"
#import "GCTextAttribute.h"

@implementation GCDataAttribute {
	GCDateAttribute *_date;
	NSMutableArray *_texts;
}

// Methods:
/** Initializes and returns a data.

 
 @return A new data.
*/
+(GCDataAttribute *)data
{
	return [[self alloc] init];
}
/** Initializes and returns a data.

 @param value The value as a GCValue object.
 @return A new data.
*/
+(GCDataAttribute *)dataWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a data.

 @param value The value as an NSString.
 @return A new data.
*/
+(GCDataAttribute *)dataWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"data"];
	
	if (self) {
		// initialize ivars, if any:
		_texts = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setDate:(GCProperty *)obj
{
	if (_date) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_date = (id)obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (NSMutableArray *)mutableTexts {
    return [self mutableArrayValueForKey:@"texts"];
}

- (NSUInteger)countOfTexts {
	return [_texts count];
}

- (id)objectInTextsAtIndex:(NSUInteger)index {
    return [_texts objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inTextsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCTextAttribute class]]);
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_texts insertObject:obj atIndex:index];
}

- (void)removeObjectFromTextsAtIndex:(NSUInteger)index {
	((GCProperty *)_texts[index]).describedObject = nil;
    [_texts removeObjectAtIndex:index];
}
	

@end

