/*
 This file was autogenerated by tags.py 
 */

#import "GCHeaderEntity.h"

#import "GCObject_internal.h"

#import "GCCharacterSetAttribute.h"
#import "GCCopyrightAttribute.h"
#import "GCDestinationAttribute.h"
#import "GCFileAttribute.h"
#import "GCGedcomAttribute.h"
#import "GCHeaderDateAttribute.h"
#import "GCHeaderSourceAttribute.h"
#import "GCLanguageAttribute.h"
#import "GCNoteEmbeddedAttribute.h"
#import "GCPlaceFormatSpecifierAttribute.h"
#import "GCSubmissionReferenceRelationship.h"
#import "GCSubmitterReferenceRelationship.h"

@implementation GCHeaderEntity {
	GCHeaderSourceAttribute *_headerSource;
	NSMutableArray *_destinations;
	GCHeaderDateAttribute *_headerDate;
	GCSubmitterReferenceRelationship *_submitterReference;
	NSMutableArray *_submissionReferences;
	GCFileAttribute *_file;
	GCCopyrightAttribute *_copyright;
	GCGedcomAttribute *_gedcom;
	GCCharacterSetAttribute *_characterSet;
	GCLanguageAttribute *_language;
	GCPlaceFormatSpecifierAttribute *_placeFormatSpecifier;
	GCNoteEmbeddedAttribute *_noteEmbedded;
}

+ (GCTag *)gedTag
{
	return [GCTag tagWithClassName:@"GCHeaderEntity"];
}

// Methods:
/** Initializes and returns a header.

 @param context The context in which to create the entity.
 @return A new header.
*/
+(GCHeaderEntity *)headerInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"header" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_destinations = [NSMutableArray array];
		_submissionReferences = [NSMutableArray array];
	}
	
	return self;
}


// Properties:
@dynamic headerSource;

@dynamic mutableDestinations;

- (NSUInteger)countOfDestinations {
	return [_destinations count];
}

- (id)objectInDestinationsAtIndex:(NSUInteger)index {
	return [_destinations objectAtIndex:index];
}
 
- (void)insertObject:(id)obj inDestinationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCDestinationAttribute class]]);
	
	NSBundle *frameworkBundle = [NSBundle bundleForClass:[self class]];
	
	NSString *formatString = [frameworkBundle localizedStringForKey:@"Undo %@"
															  value:@"Undo %@"
															  table:@"Misc"];
	
	[(GCHeaderEntity *)[self.undoManager prepareWithInvocationTarget:self] removeObjectFromDestinationsAtIndex:index];
	[self.undoManager setActionName:[NSString stringWithFormat:formatString, self.localizedType]];
	
	if ([obj valueForKey:@"describedObject"] == self) {
		return;
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	[_destinations insertObject:obj atIndex:index];
}

- (void)removeObjectFromDestinationsAtIndex:(NSUInteger)index {
	NSBundle *frameworkBundle = [NSBundle bundleForClass:[self class]];
	
	NSString *formatString = [frameworkBundle localizedStringForKey:@"Undo %@"
															  value:@"Undo %@"
															  table:@"Misc"];
	
	[(GCHeaderEntity *)[self.undoManager prepareWithInvocationTarget:self] insertObject:_destinations[index] inDestinationsAtIndex:index];
	[self.undoManager setActionName:[NSString stringWithFormat:formatString, self.localizedType]];
	
	[((GCObject *)_destinations[index]) setValue:nil forKey:@"describedObject"];
	
	[_destinations removeObjectAtIndex:index];
}

@dynamic headerDate;
@dynamic submitterReference;

@dynamic mutableSubmissionReferences;

- (NSUInteger)countOfSubmissionReferences {
	return [_submissionReferences count];
}

- (id)objectInSubmissionReferencesAtIndex:(NSUInteger)index {
	return [_submissionReferences objectAtIndex:index];
}
 
- (void)insertObject:(id)obj inSubmissionReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSubmissionReferenceRelationship class]]);
	
	NSBundle *frameworkBundle = [NSBundle bundleForClass:[self class]];
	
	NSString *formatString = [frameworkBundle localizedStringForKey:@"Undo %@"
															  value:@"Undo %@"
															  table:@"Misc"];
	
	[(GCHeaderEntity *)[self.undoManager prepareWithInvocationTarget:self] removeObjectFromSubmissionReferencesAtIndex:index];
	[self.undoManager setActionName:[NSString stringWithFormat:formatString, self.localizedType]];
	
	if ([obj valueForKey:@"describedObject"] == self) {
		return;
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	[_submissionReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromSubmissionReferencesAtIndex:(NSUInteger)index {
	NSBundle *frameworkBundle = [NSBundle bundleForClass:[self class]];
	
	NSString *formatString = [frameworkBundle localizedStringForKey:@"Undo %@"
															  value:@"Undo %@"
															  table:@"Misc"];
	
	[(GCHeaderEntity *)[self.undoManager prepareWithInvocationTarget:self] insertObject:_submissionReferences[index] inSubmissionReferencesAtIndex:index];
	[self.undoManager setActionName:[NSString stringWithFormat:formatString, self.localizedType]];
	
	[((GCObject *)_submissionReferences[index]) setValue:nil forKey:@"describedObject"];
	
	[_submissionReferences removeObjectAtIndex:index];
}

@dynamic file;
@dynamic copyright;
@dynamic gedcom;
@dynamic characterSet;
@dynamic language;
@dynamic placeFormatSpecifier;
@dynamic noteEmbedded;

@end

