/*
 This file was autogenerated by tags.py 
 */

#import "GCMultimediaEmbeddedAttribute.h"

#import "GCObject_internal.h"
#import "GCProperty_internal.h"

#import "GCFileAttribute.h"
#import "GCMultimediaFormatAttribute.h"
#import "GCNoteEmbeddedAttribute.h"
#import "GCNoteReferenceRelationship.h"
#import "GCTitleAttribute.h"

@implementation GCMultimediaEmbeddedAttribute {
	GCMultimediaFormatAttribute *_multimediaFormat;
	GCTitleAttribute *_title;
	GCFileAttribute *_file;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a multimediaEmbedded.

 
 @return A new multimediaEmbedded.
*/
+(GCMultimediaEmbeddedAttribute *)multimediaEmbedded
{
	return [[self alloc] init];
}
/** Initializes and returns a multimediaEmbedded.

 @param value The value as a GCValue object.
 @return A new multimediaEmbedded.
*/
+(GCMultimediaEmbeddedAttribute *)multimediaEmbeddedWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a multimediaEmbedded.

 @param value The value as an NSString.
 @return A new multimediaEmbedded.
*/
+(GCMultimediaEmbeddedAttribute *)multimediaEmbeddedWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"multimediaEmbedded"];
	
	if (self) {
		// initialize ivars, if any:
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setMultimediaFormat:(GCProperty *)obj
{
	if (_multimediaFormat) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_multimediaFormat = (id)obj;
}

- (GCMultimediaFormatAttribute *)multimediaFormat
{
	return _multimediaFormat;
}


- (void)setTitle:(GCProperty *)obj
{
	if (_title) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_title = (id)obj;
}

- (GCTitleAttribute *)title
{
	return _title;
}


- (void)setFile:(GCProperty *)obj
{
	if (_file) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_file = (id)obj;
}

- (GCFileAttribute *)file
{
	return _file;
}

@dynamic notes;

- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCProperty *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCProperty *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

