/*
 This file was autogenerated by tags.py 
 */

#import "GCFamilyEntity.h"

#import "GCObject_internal.h"
#import "GCContext_internal.h"
#import "GCProperty_internal.h"

#import "GCAnnulmentAttribute.h"
#import "GCCensusAttribute.h"
#import "GCChangeInfoAttribute.h"
#import "GCChildRelationship.h"
#import "GCDivorceAttribute.h"
#import "GCDivorceFiledAttribute.h"
#import "GCEngagementAttribute.h"
#import "GCGenericEventAttribute.h"
#import "GCHusbandRelationship.h"
#import "GCLDSSealingSpouseAttribute.h"
#import "GCMarriageAttribute.h"
#import "GCMarriageBannAttribute.h"
#import "GCMarriageContractAttribute.h"
#import "GCMarriageLicenseAttribute.h"
#import "GCMarriageSettlementAttribute.h"
#import "GCMultimediaEmbeddedAttribute.h"
#import "GCMultimediaReferenceRelationship.h"
#import "GCNoteEmbeddedAttribute.h"
#import "GCNoteReferenceRelationship.h"
#import "GCNumberOfChildrenAttribute.h"
#import "GCRecordIdNumberAttribute.h"
#import "GCSourceCitationRelationship.h"
#import "GCSourceEmbeddedAttribute.h"
#import "GCSubmitterReferenceRelationship.h"
#import "GCUserReferenceNumberAttribute.h"
#import "GCWifeRelationship.h"

@implementation GCFamilyEntity {
	NSMutableArray *_annulments;
	NSMutableArray *_censuses;
	NSMutableArray *_divorces;
	NSMutableArray *_divorceFileds;
	NSMutableArray *_engagements;
	NSMutableArray *_marriages;
	NSMutableArray *_marriageBanns;
	NSMutableArray *_marriageContracts;
	NSMutableArray *_marriageLicenses;
	NSMutableArray *_marriageSettlements;
	NSMutableArray *_genericEvents;
	GCHusbandRelationship *_husband;
	GCWifeRelationship *_wife;
	NSMutableArray *_children;
	GCNumberOfChildrenAttribute *_numberOfChildren;
	NSMutableArray *_submitterReferences;
	NSMutableArray *_lDSSealingSpouses;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	NSMutableArray *_userReferenceNumbers;
	GCRecordIdNumberAttribute *_recordIdNumber;
	GCChangeInfoAttribute *_changeInfo;
}

// Methods:
/** Initializes and returns a family.

 @param context The context in which to create the entity.
 @return A new family.
*/
+(GCFamilyEntity *)familyInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"family" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_annulments = [NSMutableArray array];
		_censuses = [NSMutableArray array];
		_divorces = [NSMutableArray array];
		_divorceFileds = [NSMutableArray array];
		_engagements = [NSMutableArray array];
		_marriages = [NSMutableArray array];
		_marriageBanns = [NSMutableArray array];
		_marriageContracts = [NSMutableArray array];
		_marriageLicenses = [NSMutableArray array];
		_marriageSettlements = [NSMutableArray array];
		_genericEvents = [NSMutableArray array];
		_children = [NSMutableArray array];
		_submitterReferences = [NSMutableArray array];
		_lDSSealingSpouses = [NSMutableArray array];
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
		_userReferenceNumbers = [NSMutableArray array];
	}
	
	return self;
}


// Properties:
@dynamic familyEvents;

- (NSMutableArray *)mutableAnnulments {
    return [self mutableArrayValueForKey:@"annulments"];
}

- (NSUInteger)countOfAnnulments {
	return [_annulments count];
}

- (id)objectInAnnulmentsAtIndex:(NSUInteger)index {
    return [_annulments objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inAnnulmentsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCAnnulmentAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromAnnulmentsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo annulments"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_annulments insertObject:obj atIndex:index];
}

- (void)removeObjectFromAnnulmentsAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_annulments[index] inAnnulmentsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo annulments"]; //TODO
	
	((GCProperty *)_annulments[index]).describedObject = nil;
	
    [_annulments removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableCensuses {
    return [self mutableArrayValueForKey:@"censuses"];
}

- (NSUInteger)countOfCensuses {
	return [_censuses count];
}

- (id)objectInCensusesAtIndex:(NSUInteger)index {
    return [_censuses objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inCensusesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCCensusAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromCensusesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo censuses"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_censuses insertObject:obj atIndex:index];
}

- (void)removeObjectFromCensusesAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_censuses[index] inCensusesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo censuses"]; //TODO
	
	((GCProperty *)_censuses[index]).describedObject = nil;
	
    [_censuses removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableDivorces {
    return [self mutableArrayValueForKey:@"divorces"];
}

- (NSUInteger)countOfDivorces {
	return [_divorces count];
}

- (id)objectInDivorcesAtIndex:(NSUInteger)index {
    return [_divorces objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inDivorcesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCDivorceAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromDivorcesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo divorces"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_divorces insertObject:obj atIndex:index];
}

- (void)removeObjectFromDivorcesAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_divorces[index] inDivorcesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo divorces"]; //TODO
	
	((GCProperty *)_divorces[index]).describedObject = nil;
	
    [_divorces removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableDivorceFileds {
    return [self mutableArrayValueForKey:@"divorceFileds"];
}

- (NSUInteger)countOfDivorceFileds {
	return [_divorceFileds count];
}

- (id)objectInDivorceFiledsAtIndex:(NSUInteger)index {
    return [_divorceFileds objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inDivorceFiledsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCDivorceFiledAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromDivorceFiledsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo divorceFileds"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_divorceFileds insertObject:obj atIndex:index];
}

- (void)removeObjectFromDivorceFiledsAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_divorceFileds[index] inDivorceFiledsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo divorceFileds"]; //TODO
	
	((GCProperty *)_divorceFileds[index]).describedObject = nil;
	
    [_divorceFileds removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableEngagements {
    return [self mutableArrayValueForKey:@"engagements"];
}

- (NSUInteger)countOfEngagements {
	return [_engagements count];
}

- (id)objectInEngagementsAtIndex:(NSUInteger)index {
    return [_engagements objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inEngagementsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCEngagementAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromEngagementsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo engagements"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_engagements insertObject:obj atIndex:index];
}

- (void)removeObjectFromEngagementsAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_engagements[index] inEngagementsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo engagements"]; //TODO
	
	((GCProperty *)_engagements[index]).describedObject = nil;
	
    [_engagements removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMarriages {
    return [self mutableArrayValueForKey:@"marriages"];
}

- (NSUInteger)countOfMarriages {
	return [_marriages count];
}

- (id)objectInMarriagesAtIndex:(NSUInteger)index {
    return [_marriages objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inMarriagesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMarriageAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromMarriagesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo marriages"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_marriages insertObject:obj atIndex:index];
}

- (void)removeObjectFromMarriagesAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_marriages[index] inMarriagesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo marriages"]; //TODO
	
	((GCProperty *)_marriages[index]).describedObject = nil;
	
    [_marriages removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMarriageBanns {
    return [self mutableArrayValueForKey:@"marriageBanns"];
}

- (NSUInteger)countOfMarriageBanns {
	return [_marriageBanns count];
}

- (id)objectInMarriageBannsAtIndex:(NSUInteger)index {
    return [_marriageBanns objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inMarriageBannsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMarriageBannAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromMarriageBannsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo marriageBanns"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_marriageBanns insertObject:obj atIndex:index];
}

- (void)removeObjectFromMarriageBannsAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_marriageBanns[index] inMarriageBannsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo marriageBanns"]; //TODO
	
	((GCProperty *)_marriageBanns[index]).describedObject = nil;
	
    [_marriageBanns removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMarriageContracts {
    return [self mutableArrayValueForKey:@"marriageContracts"];
}

- (NSUInteger)countOfMarriageContracts {
	return [_marriageContracts count];
}

- (id)objectInMarriageContractsAtIndex:(NSUInteger)index {
    return [_marriageContracts objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inMarriageContractsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMarriageContractAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromMarriageContractsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo marriageContracts"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_marriageContracts insertObject:obj atIndex:index];
}

- (void)removeObjectFromMarriageContractsAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_marriageContracts[index] inMarriageContractsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo marriageContracts"]; //TODO
	
	((GCProperty *)_marriageContracts[index]).describedObject = nil;
	
    [_marriageContracts removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMarriageLicenses {
    return [self mutableArrayValueForKey:@"marriageLicenses"];
}

- (NSUInteger)countOfMarriageLicenses {
	return [_marriageLicenses count];
}

- (id)objectInMarriageLicensesAtIndex:(NSUInteger)index {
    return [_marriageLicenses objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inMarriageLicensesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMarriageLicenseAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromMarriageLicensesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo marriageLicenses"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_marriageLicenses insertObject:obj atIndex:index];
}

- (void)removeObjectFromMarriageLicensesAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_marriageLicenses[index] inMarriageLicensesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo marriageLicenses"]; //TODO
	
	((GCProperty *)_marriageLicenses[index]).describedObject = nil;
	
    [_marriageLicenses removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMarriageSettlements {
    return [self mutableArrayValueForKey:@"marriageSettlements"];
}

- (NSUInteger)countOfMarriageSettlements {
	return [_marriageSettlements count];
}

- (id)objectInMarriageSettlementsAtIndex:(NSUInteger)index {
    return [_marriageSettlements objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inMarriageSettlementsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMarriageSettlementAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromMarriageSettlementsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo marriageSettlements"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_marriageSettlements insertObject:obj atIndex:index];
}

- (void)removeObjectFromMarriageSettlementsAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_marriageSettlements[index] inMarriageSettlementsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo marriageSettlements"]; //TODO
	
	((GCProperty *)_marriageSettlements[index]).describedObject = nil;
	
    [_marriageSettlements removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableGenericEvents {
    return [self mutableArrayValueForKey:@"genericEvents"];
}

- (NSUInteger)countOfGenericEvents {
	return [_genericEvents count];
}

- (id)objectInGenericEventsAtIndex:(NSUInteger)index {
    return [_genericEvents objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inGenericEventsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCGenericEventAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromGenericEventsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo genericEvents"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_genericEvents insertObject:obj atIndex:index];
}

- (void)removeObjectFromGenericEventsAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_genericEvents[index] inGenericEventsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo genericEvents"]; //TODO
	
	((GCProperty *)_genericEvents[index]).describedObject = nil;
	
    [_genericEvents removeObjectAtIndex:index];
}
	

- (void)setHusband:(GCProperty *)obj
{
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setHusband:_husband];
	[self.context.undoManager setActionName:@"Undo husband"]; //TODO
	
	if (_husband) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_husband = (id)obj;
}

- (GCHusbandRelationship *)husband
{
	return _husband;
}


- (void)setWife:(GCProperty *)obj
{
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setWife:_wife];
	[self.context.undoManager setActionName:@"Undo wife"]; //TODO
	
	if (_wife) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_wife = (id)obj;
}

- (GCWifeRelationship *)wife
{
	return _wife;
}


- (NSMutableArray *)mutableChildren {
    return [self mutableArrayValueForKey:@"children"];
}

- (NSUInteger)countOfChildren {
	return [_children count];
}

- (id)objectInChildrenAtIndex:(NSUInteger)index {
    return [_children objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inChildrenAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCChildRelationship class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromChildrenAtIndex:index];
	[self.context.undoManager setActionName:@"Undo children"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_children insertObject:obj atIndex:index];
}

- (void)removeObjectFromChildrenAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_children[index] inChildrenAtIndex:index];
	[self.context.undoManager setActionName:@"Undo children"]; //TODO
	
	((GCProperty *)_children[index]).describedObject = nil;
	
    [_children removeObjectAtIndex:index];
}
	

- (void)setNumberOfChildren:(GCProperty *)obj
{
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setNumberOfChildren:_numberOfChildren];
	[self.context.undoManager setActionName:@"Undo numberOfChildren"]; //TODO
	
	if (_numberOfChildren) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_numberOfChildren = (id)obj;
}

- (GCNumberOfChildrenAttribute *)numberOfChildren
{
	return _numberOfChildren;
}


- (NSMutableArray *)mutableSubmitterReferences {
    return [self mutableArrayValueForKey:@"submitterReferences"];
}

- (NSUInteger)countOfSubmitterReferences {
	return [_submitterReferences count];
}

- (id)objectInSubmitterReferencesAtIndex:(NSUInteger)index {
    return [_submitterReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inSubmitterReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSubmitterReferenceRelationship class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromSubmitterReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo submitterReferences"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_submitterReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromSubmitterReferencesAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_submitterReferences[index] inSubmitterReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo submitterReferences"]; //TODO
	
	((GCProperty *)_submitterReferences[index]).describedObject = nil;
	
    [_submitterReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableLDSSealingSpouses {
    return [self mutableArrayValueForKey:@"lDSSealingSpouses"];
}

- (NSUInteger)countOfLDSSealingSpouses {
	return [_lDSSealingSpouses count];
}

- (id)objectInLDSSealingSpousesAtIndex:(NSUInteger)index {
    return [_lDSSealingSpouses objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inLDSSealingSpousesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCLDSSealingSpouseAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromLDSSealingSpousesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo lDSSealingSpouses"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_lDSSealingSpouses insertObject:obj atIndex:index];
}

- (void)removeObjectFromLDSSealingSpousesAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_lDSSealingSpouses[index] inLDSSealingSpousesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo lDSSealingSpouses"]; //TODO
	
	((GCProperty *)_lDSSealingSpouses[index]).describedObject = nil;
	
    [_lDSSealingSpouses removeObjectAtIndex:index];
}
	
@dynamic sources;

- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromSourceCitationsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo sourceCitations"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_sourceCitations[index] inSourceCitationsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo sourceCitations"]; //TODO
	
	((GCProperty *)_sourceCitations[index]).describedObject = nil;
	
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromSourceEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo sourceEmbeddeds"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_sourceEmbeddeds[index] inSourceEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo sourceEmbeddeds"]; //TODO
	
	((GCProperty *)_sourceEmbeddeds[index]).describedObject = nil;
	
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	
@dynamic multimedias;

- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromMultimediaReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo multimediaReferences"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_multimediaReferences[index] inMultimediaReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo multimediaReferences"]; //TODO
	
	((GCProperty *)_multimediaReferences[index]).describedObject = nil;
	
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromMultimediaEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo multimediaEmbeddeds"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_multimediaEmbeddeds[index] inMultimediaEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo multimediaEmbeddeds"]; //TODO
	
	((GCProperty *)_multimediaEmbeddeds[index]).describedObject = nil;
	
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	
@dynamic notes;

- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromNoteReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo noteReferences"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_noteReferences[index] inNoteReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo noteReferences"]; //TODO
	
	((GCProperty *)_noteReferences[index]).describedObject = nil;
	
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromNoteEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo noteEmbeddeds"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_noteEmbeddeds[index] inNoteEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo noteEmbeddeds"]; //TODO
	
	((GCProperty *)_noteEmbeddeds[index]).describedObject = nil;
	
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableUserReferenceNumbers {
    return [self mutableArrayValueForKey:@"userReferenceNumbers"];
}

- (NSUInteger)countOfUserReferenceNumbers {
	return [_userReferenceNumbers count];
}

- (id)objectInUserReferenceNumbersAtIndex:(NSUInteger)index {
    return [_userReferenceNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inUserReferenceNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCUserReferenceNumberAttribute class]]);
	
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromUserReferenceNumbersAtIndex:index];
	[self.context.undoManager setActionName:@"Undo userReferenceNumbers"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_userReferenceNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromUserReferenceNumbersAtIndex:(NSUInteger)index {
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_userReferenceNumbers[index] inUserReferenceNumbersAtIndex:index];
	[self.context.undoManager setActionName:@"Undo userReferenceNumbers"]; //TODO
	
	((GCProperty *)_userReferenceNumbers[index]).describedObject = nil;
	
    [_userReferenceNumbers removeObjectAtIndex:index];
}
	

- (void)setRecordIdNumber:(GCProperty *)obj
{
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setRecordIdNumber:_recordIdNumber];
	[self.context.undoManager setActionName:@"Undo recordIdNumber"]; //TODO
	
	if (_recordIdNumber) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_recordIdNumber = (id)obj;
}

- (GCRecordIdNumberAttribute *)recordIdNumber
{
	return _recordIdNumber;
}


- (void)setChangeInfo:(GCProperty *)obj
{
	[(GCFamilyEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setChangeInfo:_changeInfo];
	[self.context.undoManager setActionName:@"Undo changeInfo"]; //TODO
	
	if (_changeInfo) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_changeInfo = (id)obj;
}

- (GCChangeInfoAttribute *)changeInfo
{
	return _changeInfo;
}


@end

