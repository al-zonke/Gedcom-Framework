/*
 This file was autogenerated by tags.py 
 */

#import "GCSourceDataAttribute.h"

#import "GCObject_internal.h"
#import "GCProperty_internal.h"

#import "GCEventsRecordedAttribute.h"
#import "GCNoteEmbeddedAttribute.h"
#import "GCNoteReferenceRelationship.h"
#import "GCResponsibleAgencyAttribute.h"

@implementation GCSourceDataAttribute {
	NSMutableArray *_eventsRecordeds;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a sourceData.

 
 @return A new sourceData.
*/
+(GCSourceDataAttribute *)sourceData
{
	return [[self alloc] init];
}
/** Initializes and returns a sourceData.

 @param value The value as a GCValue object.
 @return A new sourceData.
*/
+(GCSourceDataAttribute *)sourceDataWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a sourceData.

 @param value The value as an NSString.
 @return A new sourceData.
*/
+(GCSourceDataAttribute *)sourceDataWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"sourceData"];
	
	if (self) {
		// initialize ivars, if any:
		_eventsRecordeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (NSMutableArray *)mutableEventsRecordeds {
    return [self mutableArrayValueForKey:@"eventsRecordeds"];
}

- (NSUInteger)countOfEventsRecordeds {
	return [_eventsRecordeds count];
}

- (id)objectInEventsRecordedsAtIndex:(NSUInteger)index {
    return [_eventsRecordeds objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inEventsRecordedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCEventsRecordedAttribute class]]);
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_eventsRecordeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromEventsRecordedsAtIndex:(NSUInteger)index {
	((GCProperty *)_eventsRecordeds[index]).describedObject = nil;
    [_eventsRecordeds removeObjectAtIndex:index];
}
	

- (void)setResponsibleAgency:(GCProperty *)obj
{
	if (_responsibleAgency) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_responsibleAgency = (id)obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}

@dynamic notes;

- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCProperty *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCProperty *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

