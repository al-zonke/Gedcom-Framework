/*
 This file was autogenerated by tags.py 
 */

#import "GCPersonalNameAttribute.h"

#import "GCObject_internal.h"
#import "GCContext_internal.h"

#import "GCGivenNameAttribute.h"
#import "GCNamePrefixAttribute.h"
#import "GCNameSuffixAttribute.h"
#import "GCNicknameAttribute.h"
#import "GCNoteEmbeddedAttribute.h"
#import "GCNoteReferenceRelationship.h"
#import "GCSourceCitationRelationship.h"
#import "GCSourceEmbeddedAttribute.h"
#import "GCSurnameAttribute.h"
#import "GCSurnamePrefixAttribute.h"

@implementation GCPersonalNameAttribute {
	GCNamePrefixAttribute *_namePrefix;
	GCGivenNameAttribute *_givenName;
	GCNicknameAttribute *_nickname;
	GCSurnamePrefixAttribute *_surnamePrefix;
	GCSurnameAttribute *_surname;
	GCNameSuffixAttribute *_nameSuffix;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a personalName.

 
 @return A new personalName.
*/
+(GCPersonalNameAttribute *)personalName
{
	return [[self alloc] init];
}
/** Initializes and returns a personalName.

 @param value The value as a GCValue object.
 @return A new personalName.
*/
+(GCPersonalNameAttribute *)personalNameWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a personalName.

 @param value The value as an NSString.
 @return A new personalName.
*/
+(GCPersonalNameAttribute *)personalNameWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"personalName"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setNamePrefix:(id)obj
{
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] setNamePrefix:_namePrefix];
	[self.context.undoManager setActionName:@"Undo namePrefix"]; //TODO
	
	if (_namePrefix) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_namePrefix = (id)obj;
}

- (GCNamePrefixAttribute *)namePrefix
{
	return _namePrefix;
}


- (void)setGivenName:(id)obj
{
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] setGivenName:_givenName];
	[self.context.undoManager setActionName:@"Undo givenName"]; //TODO
	
	if (_givenName) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_givenName = (id)obj;
}

- (GCGivenNameAttribute *)givenName
{
	return _givenName;
}


- (void)setNickname:(id)obj
{
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] setNickname:_nickname];
	[self.context.undoManager setActionName:@"Undo nickname"]; //TODO
	
	if (_nickname) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_nickname = (id)obj;
}

- (GCNicknameAttribute *)nickname
{
	return _nickname;
}


- (void)setSurnamePrefix:(id)obj
{
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] setSurnamePrefix:_surnamePrefix];
	[self.context.undoManager setActionName:@"Undo surnamePrefix"]; //TODO
	
	if (_surnamePrefix) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_surnamePrefix = (id)obj;
}

- (GCSurnamePrefixAttribute *)surnamePrefix
{
	return _surnamePrefix;
}


- (void)setSurname:(id)obj
{
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] setSurname:_surname];
	[self.context.undoManager setActionName:@"Undo surname"]; //TODO
	
	if (_surname) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_surname = (id)obj;
}

- (GCSurnameAttribute *)surname
{
	return _surname;
}


- (void)setNameSuffix:(id)obj
{
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] setNameSuffix:_nameSuffix];
	[self.context.undoManager setActionName:@"Undo nameSuffix"]; //TODO
	
	if (_nameSuffix) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_nameSuffix = (id)obj;
}

- (GCNameSuffixAttribute *)nameSuffix
{
	return _nameSuffix;
}

@dynamic sources;

- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(id)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromSourceCitationsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo sourceCitations"]; //TODO
	
	if ([obj valueForKey:@"describedObject"] == self) {
		return;
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_sourceCitations[index] inSourceCitationsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo sourceCitations"]; //TODO
	
	[((GCObject *)_sourceCitations[index]) setValue:nil forKey:@"describedObject"];
	
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(id)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromSourceEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo sourceEmbeddeds"]; //TODO
	
	if ([obj valueForKey:@"describedObject"] == self) {
		return;
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_sourceEmbeddeds[index] inSourceEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo sourceEmbeddeds"]; //TODO
	
	[((GCObject *)_sourceEmbeddeds[index]) setValue:nil forKey:@"describedObject"];
	
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	
@dynamic notes;

- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(id)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromNoteReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo noteReferences"]; //TODO
	
	if ([obj valueForKey:@"describedObject"] == self) {
		return;
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_noteReferences[index] inNoteReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo noteReferences"]; //TODO
	
	[((GCObject *)_noteReferences[index]) setValue:nil forKey:@"describedObject"];
	
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(id)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromNoteEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo noteEmbeddeds"]; //TODO
	
	if ([obj valueForKey:@"describedObject"] == self) {
		return;
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	[(GCPersonalNameAttribute *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_noteEmbeddeds[index] inNoteEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo noteEmbeddeds"]; //TODO
	
	[((GCObject *)_noteEmbeddeds[index]) setValue:nil forKey:@"describedObject"];
	
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

