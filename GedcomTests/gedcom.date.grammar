/*

ParseKit grammar for GEDCOM dates based on the 5.5 documentation.

It is more forgiving than the specs call for. Specifically, it
allows for the following non-standard items:

	- months as numerals

Note that the date is wrapped in [brackets]. This is to avoid partial
matches of datePeriod screwing with the state in GCDateParser. You do
not need to wrap dates before passing them to GCDateParser, that will
be done automatically. Just pass them exactly as they appear after the
DATE tag.

*/

@start					= date;

date					= '['! (dateSimple | 
						  datePeriod | 
						  dateRange | 
						  dateApproximated | 
						  dateInterpreted | 
						  datePhrase) ']'!;

datePeriod				= 'FROM' dateSimple 'TO' dateSimple |
						  'FROM' dateSimple |
						  'TO' dateSimple ;

dateRange				= 'BET' dateSimple 'AND' dateSimple | 
						  'BEF' dateSimple | 
						  'AFT' dateSimple ;

dateApproximated		= ('ABT' | 'CAL' | 'EST') dateSimple;

dateInterpreted			= 'INT' dateSimple datePhrase;

datePhrase				= '(' datePhraseContents+ ')';
datePhraseContents		= /[^\)]+/;

dateSimple				= ( '@#DGREGORIAN@' dateGreg |
							'@#DJULIAN@' dateJuln | 
							'@#DHEBREW@' dateHebr | 
							'@#DFRENCH R@' dateFren | 
							'@#DJULIAN@' dateFuture |
							dateGreg );						//default

dateGreg				= yearGreg | month yearGreg | day month yearGreg;
dateJuln				= year | month year | day month year;
dateHebr				= year | monthHebr year | day monthHebr year;
dateFren				= year | monthFren year | day monthFren year;

day						= /\d{1,2}/;

month					= monthWord | monthNumeral;
monthWord				= (	'JAN' | 'FEB' | 'MAR' | 'APR' | 'MAY' | 'JUN' | 
							'JUL' | 'AUG' | 'SEP' | 'OCT' | 'NOV' | 'DEC');
monthNumeral			= /\d{1,2}/;

monthFren				= (	'VEND' | 'BRUM' | 'FRIM' | 'NIVO' | 'PLUV' | 
							'VENT' | 'GERM' | 'FLOR' | 'PRAI' | 'MESS' | 
							'THER' | 'FRUC' | 'COMP');
monthHebr				= (	'TSH' | 'CSH' | 'KSL' | 'TVT' | 'SHV' | 'ADR' | 
							'ADS' | 'NSN' | 'IYR' | 'SVN' | 'TMZ' | 'AAV' | 
							'ELL');
year					= /\d{3,4}/; // YEAR: = {Size=3:4} 
yearGreg				= year; // | /\d{3,4}\/\d\d/; // YEARGREG: = [ <NUMBER> | <NUMBER>/<DIGIT><DIGIT> ] {Size=3:7} 

//dateExact				= day month yearGreg; // not used in EVEN.DATE

/*************************************************************************

	 DATE: = {Size=4:35} 
	 [ <DATE_CALENDAR_ESCAPE> | <NULL>] 
	 <DATE_CALENDAR> 
	 
	 DATE_APPROXIMATED: = {Size=4:35} 
	 [ 
	 ABT <DATE> | 
	 CAL <DATE> | 
	 EST <DATE> 
	 ] 
	 
	 DATE_CALENDAR: = {Size=4:35} 
	 [ <DATE_GREG> | <DATE_JULN> | <DATE_HEBR> | <DATE_FREN> | 
	 <DATE_FUTURE> ] 
	 
	 DATE_CALENDAR_ESCAPE: = {Size=4:15} 
	 [ @#DHEBREW@ | @#DROMAN@ | @#DFRENCH R@ | @#DGREGORIAN@ | 
	 @#DJULIAN@ | @#DUNKNOWN@ ] 
	 
	 DATE_EXACT: = {Size=10:11} 
	 <DAY> <MONTH> <YEAR_GREG> 
	 
	 DATE_FREN: = {Size=4:35} 
	 [ <YEAR> | <MONTH_FREN> <YEAR> | <DAY> <MONTH_FREN> <YEAR> ] 
	 See <MONTH_FREN> 
	 
	 DATE_GREG: = {Size=4:35} 
	 [ <YEAR_GREG> | <MONTH> <YEAR_GREG> | <DAY> <MONTH> <YEAR_GREG> ] 
	 See <YEAR_GREG>. 
	 
	 DATE_HEBR: = {Size=4:35} 
	 [ <YEAR> | <MONTH_HEBR> <YEAR> | <DAY> <MONTH_HEBR> <YEAR> ] 
	 See <MONTH_HEBR>. 
	 
	 DATE_JULN: = {Size=4:35} 
	 [ <YEAR> | <MONTH> <YEAR> | <DAY> <MONTH> <YEAR> ] 
	 
	 DATE_LDS_ORD: = {Size=4:35} 
	 <DATE_VALUE> 
	 
	 DATE_PERIOD: = {Size=7:35} 
	 [ 
	 FROM <DATE> | 
	 TO <DATE> | 
	 FROM <DATE> TO <DATE> 
	 ] 
	 
	 DATE_PHRASE: = {Size=1:35} 
	 (<TEXT>) 
	 
	 DATE_RANGE: = {Size=8:35} 
	 [ 
	 BEF <DATE> | 
	 AFT <DATE> | 
	 BET <DATE> AND <DATE> 
	 ] 
	 
	 DATE_VALUE: = {Size=1:35} 
	 [ 
	 <DATE> | 
	 <DATE_PERIOD> | 
	 <DATE_RANGE> 
	 <DATE_APPROXIMATED> | 
	 INT <DATE> (<DATE_PHRASE>) | 
	 (<DATE_PHRASE>) 
	 ] 
	 
	 DAY: = {Size=1:2} 
	 dd

	 MONTH: = {Size=3} 
	 [ JAN | FEB | MAR | APR | MAY | JUN | 
	 JUL | AUG | SEP | OCT | NOV | DEC ] 
	 
	 MONTH_FREN: = {Size=4} 
	 [ VEND | BRUM | FRIM | NIVO | PLUV | VENT | GERM | 
	 FLOR | PRAI | MESS | THER | FRUC | COMP ] 
	 
	 MONTH_HEBR: = {Size=3} 
	 [ TSH | CSH | KSL | TVT | SHV | ADR | ADS | 
	 NSN | IYR | SVN | TMZ | AAV | ELL ] 
	 
	 YEAR_GREG: = {Size=3:7} 
	 [ <NUMBER> | <NUMBER>/<DIGIT><DIGIT> ] 


**************************************************************************/
