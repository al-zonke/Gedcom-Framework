/*
 This file was autogenerated by tags.py 
 */

#import "GCSourceEntity.h"

#import "GCObject_internal.h"
#import "GCContext_internal.h"
#import "GCProperty_internal.h"

#import "GCAbbreviationAttribute.h"
#import "GCAuthorAttribute.h"
#import "GCChangeInfoAttribute.h"
#import "GCMultimediaEmbeddedAttribute.h"
#import "GCMultimediaReferenceRelationship.h"
#import "GCNoteEmbeddedAttribute.h"
#import "GCNoteReferenceRelationship.h"
#import "GCPublicationFactsAttribute.h"
#import "GCRecordIdNumberAttribute.h"
#import "GCRepositoryCitationRelationship.h"
#import "GCSourceDataAttribute.h"
#import "GCTextAttribute.h"
#import "GCTitleAttribute.h"
#import "GCUserReferenceNumberAttribute.h"

@implementation GCSourceEntity {
	GCSourceDataAttribute *_sourceData;
	GCAuthorAttribute *_author;
	GCTitleAttribute *_title;
	GCAbbreviationAttribute *_abbreviation;
	GCPublicationFactsAttribute *_publicationFacts;
	GCTextAttribute *_text;
	GCRepositoryCitationRelationship *_repositoryCitation;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCUserReferenceNumberAttribute *_userReferenceNumber;
	GCRecordIdNumberAttribute *_recordIdNumber;
	GCChangeInfoAttribute *_changeInfo;
}

// Methods:
/** Initializes and returns a source.

 @param context The context in which to create the entity.
 @return A new source.
*/
+(GCSourceEntity *)sourceInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"source" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setSourceData:(GCProperty *)obj
{
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setSourceData:_sourceData];
	[self.context.undoManager setActionName:@"Undo sourceData"]; //TODO
	
	if (_sourceData) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_sourceData = (id)obj;
}

- (GCSourceDataAttribute *)sourceData
{
	return _sourceData;
}


- (void)setAuthor:(GCProperty *)obj
{
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setAuthor:_author];
	[self.context.undoManager setActionName:@"Undo author"]; //TODO
	
	if (_author) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_author = (id)obj;
}

- (GCAuthorAttribute *)author
{
	return _author;
}


- (void)setTitle:(GCProperty *)obj
{
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setTitle:_title];
	[self.context.undoManager setActionName:@"Undo title"]; //TODO
	
	if (_title) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_title = (id)obj;
}

- (GCTitleAttribute *)title
{
	return _title;
}


- (void)setAbbreviation:(GCProperty *)obj
{
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setAbbreviation:_abbreviation];
	[self.context.undoManager setActionName:@"Undo abbreviation"]; //TODO
	
	if (_abbreviation) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_abbreviation = (id)obj;
}

- (GCAbbreviationAttribute *)abbreviation
{
	return _abbreviation;
}


- (void)setPublicationFacts:(GCProperty *)obj
{
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setPublicationFacts:_publicationFacts];
	[self.context.undoManager setActionName:@"Undo publicationFacts"]; //TODO
	
	if (_publicationFacts) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_publicationFacts = (id)obj;
}

- (GCPublicationFactsAttribute *)publicationFacts
{
	return _publicationFacts;
}


- (void)setText:(GCProperty *)obj
{
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setText:_text];
	[self.context.undoManager setActionName:@"Undo text"]; //TODO
	
	if (_text) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_text = (id)obj;
}

- (GCTextAttribute *)text
{
	return _text;
}


- (void)setRepositoryCitation:(GCProperty *)obj
{
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setRepositoryCitation:_repositoryCitation];
	[self.context.undoManager setActionName:@"Undo repositoryCitation"]; //TODO
	
	if (_repositoryCitation) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_repositoryCitation = (id)obj;
}

- (GCRepositoryCitationRelationship *)repositoryCitation
{
	return _repositoryCitation;
}

@dynamic multimedias;

- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromMultimediaReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo multimediaReferences"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_multimediaReferences[index] inMultimediaReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo multimediaReferences"]; //TODO
	
	((GCProperty *)_multimediaReferences[index]).describedObject = nil;
	
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromMultimediaEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo multimediaEmbeddeds"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_multimediaEmbeddeds[index] inMultimediaEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo multimediaEmbeddeds"]; //TODO
	
	((GCProperty *)_multimediaEmbeddeds[index]).describedObject = nil;
	
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	
@dynamic notes;

- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromNoteReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo noteReferences"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_noteReferences[index] inNoteReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo noteReferences"]; //TODO
	
	((GCProperty *)_noteReferences[index]).describedObject = nil;
	
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCProperty *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromNoteEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo noteEmbeddeds"]; //TODO
	
	if (obj.describedObject == self) {
		return;
	}
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_noteEmbeddeds[index] inNoteEmbeddedsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo noteEmbeddeds"]; //TODO
	
	((GCProperty *)_noteEmbeddeds[index]).describedObject = nil;
	
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setUserReferenceNumber:(GCProperty *)obj
{
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setUserReferenceNumber:_userReferenceNumber];
	[self.context.undoManager setActionName:@"Undo userReferenceNumber"]; //TODO
	
	if (_userReferenceNumber) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_userReferenceNumber = (id)obj;
}

- (GCUserReferenceNumberAttribute *)userReferenceNumber
{
	return _userReferenceNumber;
}


- (void)setRecordIdNumber:(GCProperty *)obj
{
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setRecordIdNumber:_recordIdNumber];
	[self.context.undoManager setActionName:@"Undo recordIdNumber"]; //TODO
	
	if (_recordIdNumber) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_recordIdNumber = (id)obj;
}

- (GCRecordIdNumberAttribute *)recordIdNumber
{
	return _recordIdNumber;
}


- (void)setChangeInfo:(GCProperty *)obj
{
	[(GCSourceEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setChangeInfo:_changeInfo];
	[self.context.undoManager setActionName:@"Undo changeInfo"]; //TODO
	
	if (_changeInfo) {
		obj.describedObject = nil;
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	obj.describedObject = self;
	
	_changeInfo = (id)obj;
}

- (GCChangeInfoAttribute *)changeInfo
{
	return _changeInfo;
}


@end

