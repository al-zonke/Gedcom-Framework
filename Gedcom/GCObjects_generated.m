/*
 This file was autogenerated by tags.py 
 */

#import "GCObjects_generated.h"

#import "GCObject_internal.h"
#import "GCProperty_internal.h"

#import "GCChangeInfoAttribute.h"

@implementation GCAbbreviationAttribute {

}

// Methods:
/** Initializes and returns a abbreviation.

 
 @return A new abbreviation.
*/
+(GCAbbreviationAttribute *)abbreviation
{
	return [[self alloc] init];
}
/** Initializes and returns a abbreviation.

 @param value The value as a GCValue object.
 @return A new abbreviation.
*/
+(GCAbbreviationAttribute *)abbreviationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a abbreviation.

 @param value The value as an NSString.
 @return A new abbreviation.
*/
+(GCAbbreviationAttribute *)abbreviationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"abbreviation"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCAddressAttribute {
	GCAddressLine1Attribute *_addressLine1;
	GCAddressLine2Attribute *_addressLine2;
	GCCityAttribute *_city;
	GCStateAttribute *_state;
	GCPostalCodeAttribute *_postalCode;
	GCCountryAttribute *_country;
}

// Methods:
/** Initializes and returns a address.

 
 @return A new address.
*/
+(GCAddressAttribute *)address
{
	return [[self alloc] init];
}
/** Initializes and returns a address.

 @param value The value as a GCValue object.
 @return A new address.
*/
+(GCAddressAttribute *)addressWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a address.

 @param value The value as an NSString.
 @return A new address.
*/
+(GCAddressAttribute *)addressWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"address"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setAddressLine1:(GCAddressLine1Attribute *)obj
{
	if (_addressLine1) {
		[_addressLine1 setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_addressLine1 = obj;
}

- (GCAddressLine1Attribute *)addressLine1
{
	return _addressLine1;
}


- (void)setAddressLine2:(GCAddressLine2Attribute *)obj
{
	if (_addressLine2) {
		[_addressLine2 setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_addressLine2 = obj;
}

- (GCAddressLine2Attribute *)addressLine2
{
	return _addressLine2;
}


- (void)setCity:(GCCityAttribute *)obj
{
	if (_city) {
		[_city setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_city = obj;
}

- (GCCityAttribute *)city
{
	return _city;
}


- (void)setState:(GCStateAttribute *)obj
{
	if (_state) {
		[_state setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_state = obj;
}

- (GCStateAttribute *)state
{
	return _state;
}


- (void)setPostalCode:(GCPostalCodeAttribute *)obj
{
	if (_postalCode) {
		[_postalCode setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_postalCode = obj;
}

- (GCPostalCodeAttribute *)postalCode
{
	return _postalCode;
}


- (void)setCountry:(GCCountryAttribute *)obj
{
	if (_country) {
		[_country setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_country = obj;
}

- (GCCountryAttribute *)country
{
	return _country;
}


@end

@implementation GCAddressLine1Attribute {

}

// Methods:
/** Initializes and returns a addressLine1.

 
 @return A new addressLine1.
*/
+(GCAddressLine1Attribute *)addressLine1
{
	return [[self alloc] init];
}
/** Initializes and returns a addressLine1.

 @param value The value as a GCValue object.
 @return A new addressLine1.
*/
+(GCAddressLine1Attribute *)addressLine1WithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a addressLine1.

 @param value The value as an NSString.
 @return A new addressLine1.
*/
+(GCAddressLine1Attribute *)addressLine1WithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"addressLine1"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCAddressLine2Attribute {

}

// Methods:
/** Initializes and returns a addressLine2.

 
 @return A new addressLine2.
*/
+(GCAddressLine2Attribute *)addressLine2
{
	return [[self alloc] init];
}
/** Initializes and returns a addressLine2.

 @param value The value as a GCValue object.
 @return A new addressLine2.
*/
+(GCAddressLine2Attribute *)addressLine2WithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a addressLine2.

 @param value The value as an NSString.
 @return A new addressLine2.
*/
+(GCAddressLine2Attribute *)addressLine2WithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"addressLine2"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCAdoptedByWhichParentAttribute {

}

// Methods:
/** Initializes and returns a adoptedByWhichParent.

 
 @return A new adoptedByWhichParent.
*/
+(GCAdoptedByWhichParentAttribute *)adoptedByWhichParent
{
	return [[self alloc] init];
}
/** Initializes and returns a adoptedByWhichParent.

 @param value The value as a GCValue object.
 @return A new adoptedByWhichParent.
*/
+(GCAdoptedByWhichParentAttribute *)adoptedByWhichParentWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a adoptedByWhichParent.

 @param value The value as an NSString.
 @return A new adoptedByWhichParent.
*/
+(GCAdoptedByWhichParentAttribute *)adoptedByWhichParentWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"adoptedByWhichParent"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCAdoptedIntoFamilyRelationship {
	GCAdoptedByWhichParentAttribute *_adoptedByWhichParent;
}

// Methods:
/** Initializes and returns a adoptedIntoFamily.

 
 @return A new adoptedIntoFamily.
*/
+(GCAdoptedIntoFamilyRelationship *)adoptedIntoFamily
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"adoptedIntoFamily"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setAdoptedByWhichParent:(GCAdoptedByWhichParentAttribute *)obj
{
	if (_adoptedByWhichParent) {
		[_adoptedByWhichParent setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_adoptedByWhichParent = obj;
}

- (GCAdoptedByWhichParentAttribute *)adoptedByWhichParent
{
	return _adoptedByWhichParent;
}


@end

@implementation GCAdoptionAttribute {
	GCAdoptedIntoFamilyRelationship *_adoptedIntoFamily;
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a adoption.

 
 @return A new adoption.
*/
+(GCAdoptionAttribute *)adoption
{
	return [[self alloc] init];
}
/** Initializes and returns a adoption.

 @param value The value as a GCValue object.
 @return A new adoption.
*/
+(GCAdoptionAttribute *)adoptionWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a adoption.

 @param value The value as an NSString.
 @return A new adoption.
*/
+(GCAdoptionAttribute *)adoptionWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"adoption"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setAdoptedIntoFamily:(GCAdoptedIntoFamilyRelationship *)obj
{
	if (_adoptedIntoFamily) {
		[_adoptedIntoFamily setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_adoptedIntoFamily = obj;
}

- (GCAdoptedIntoFamilyRelationship *)adoptedIntoFamily
{
	return _adoptedIntoFamily;
}



- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCAdultChristeningAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a adultChristening.

 
 @return A new adultChristening.
*/
+(GCAdultChristeningAttribute *)adultChristening
{
	return [[self alloc] init];
}
/** Initializes and returns a adultChristening.

 @param value The value as a GCValue object.
 @return A new adultChristening.
*/
+(GCAdultChristeningAttribute *)adultChristeningWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a adultChristening.

 @param value The value as an NSString.
 @return A new adultChristening.
*/
+(GCAdultChristeningAttribute *)adultChristeningWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"adultChristening"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCAgeAttribute {

}

// Methods:
/** Initializes and returns a age.

 
 @return A new age.
*/
+(GCAgeAttribute *)age
{
	return [[self alloc] init];
}
/** Initializes and returns a age.

 @param value The value as a GCValue object.
 @return A new age.
*/
+(GCAgeAttribute *)ageWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a age.

 @param value The value as an NSString.
 @return A new age.
*/
+(GCAgeAttribute *)ageWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"age"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCAliasRelationship {

}

// Methods:
/** Initializes and returns a alias.

 
 @return A new alias.
*/
+(GCAliasRelationship *)alias
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"alias"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCAncestorInterestRelationship {

}

// Methods:
/** Initializes and returns a ancestorInterest.

 
 @return A new ancestorInterest.
*/
+(GCAncestorInterestRelationship *)ancestorInterest
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"ancestorInterest"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCAncestralFileNumberAttribute {

}

// Methods:
/** Initializes and returns a ancestralFileNumber.

 
 @return A new ancestralFileNumber.
*/
+(GCAncestralFileNumberAttribute *)ancestralFileNumber
{
	return [[self alloc] init];
}
/** Initializes and returns a ancestralFileNumber.

 @param value The value as a GCValue object.
 @return A new ancestralFileNumber.
*/
+(GCAncestralFileNumberAttribute *)ancestralFileNumberWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a ancestralFileNumber.

 @param value The value as an NSString.
 @return A new ancestralFileNumber.
*/
+(GCAncestralFileNumberAttribute *)ancestralFileNumberWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"ancestralFileNumber"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCAnnulmentAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCHusbandDetailAttribute *_husbandDetail;
	GCWifeDetailAttribute *_wifeDetail;
}

// Methods:
/** Initializes and returns a annulment.

 
 @return A new annulment.
*/
+(GCAnnulmentAttribute *)annulment
{
	return [[self alloc] init];
}
/** Initializes and returns a annulment.

 @param value The value as a GCValue object.
 @return A new annulment.
*/
+(GCAnnulmentAttribute *)annulmentWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a annulment.

 @param value The value as an NSString.
 @return A new annulment.
*/
+(GCAnnulmentAttribute *)annulmentWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"annulment"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setHusbandDetail:(GCHusbandDetailAttribute *)obj
{
	if (_husbandDetail) {
		[_husbandDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_husbandDetail = obj;
}

- (GCHusbandDetailAttribute *)husbandDetail
{
	return _husbandDetail;
}


- (void)setWifeDetail:(GCWifeDetailAttribute *)obj
{
	if (_wifeDetail) {
		[_wifeDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_wifeDetail = obj;
}

- (GCWifeDetailAttribute *)wifeDetail
{
	return _wifeDetail;
}


@end

@implementation GCAssociationRelationship {
	GCRecordTypeAttribute *_recordType;
	GCRelationshipDescriptorAttribute *_relationshipDescriptor;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
}

// Methods:
/** Initializes and returns a association.

 
 @return A new association.
*/
+(GCAssociationRelationship *)association
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"association"];
	
	if (self) {
		// initialize ivars, if any:
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setRecordType:(GCRecordTypeAttribute *)obj
{
	if (_recordType) {
		[_recordType setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_recordType = obj;
}

- (GCRecordTypeAttribute *)recordType
{
	return _recordType;
}


- (void)setRelationshipDescriptor:(GCRelationshipDescriptorAttribute *)obj
{
	if (_relationshipDescriptor) {
		[_relationshipDescriptor setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_relationshipDescriptor = obj;
}

- (GCRelationshipDescriptorAttribute *)relationshipDescriptor
{
	return _relationshipDescriptor;
}



- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCAuthorAttribute {

}

// Methods:
/** Initializes and returns a author.

 
 @return A new author.
*/
+(GCAuthorAttribute *)author
{
	return [[self alloc] init];
}
/** Initializes and returns a author.

 @param value The value as a GCValue object.
 @return A new author.
*/
+(GCAuthorAttribute *)authorWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a author.

 @param value The value as an NSString.
 @return A new author.
*/
+(GCAuthorAttribute *)authorWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"author"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCBaptismAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a baptism.

 
 @return A new baptism.
*/
+(GCBaptismAttribute *)baptism
{
	return [[self alloc] init];
}
/** Initializes and returns a baptism.

 @param value The value as a GCValue object.
 @return A new baptism.
*/
+(GCBaptismAttribute *)baptismWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a baptism.

 @param value The value as an NSString.
 @return A new baptism.
*/
+(GCBaptismAttribute *)baptismWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"baptism"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCBarMitzvahAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a barMitzvah.

 
 @return A new barMitzvah.
*/
+(GCBarMitzvahAttribute *)barMitzvah
{
	return [[self alloc] init];
}
/** Initializes and returns a barMitzvah.

 @param value The value as a GCValue object.
 @return A new barMitzvah.
*/
+(GCBarMitzvahAttribute *)barMitzvahWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a barMitzvah.

 @param value The value as an NSString.
 @return A new barMitzvah.
*/
+(GCBarMitzvahAttribute *)barMitzvahWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"barMitzvah"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCBasMitzvahAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a basMitzvah.

 
 @return A new basMitzvah.
*/
+(GCBasMitzvahAttribute *)basMitzvah
{
	return [[self alloc] init];
}
/** Initializes and returns a basMitzvah.

 @param value The value as a GCValue object.
 @return A new basMitzvah.
*/
+(GCBasMitzvahAttribute *)basMitzvahWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a basMitzvah.

 @param value The value as an NSString.
 @return A new basMitzvah.
*/
+(GCBasMitzvahAttribute *)basMitzvahWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"basMitzvah"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCBinaryObjectAttribute {

}

// Methods:
/** Initializes and returns a binaryObject.

 
 @return A new binaryObject.
*/
+(GCBinaryObjectAttribute *)binaryObject
{
	return [[self alloc] init];
}
/** Initializes and returns a binaryObject.

 @param value The value as a GCValue object.
 @return A new binaryObject.
*/
+(GCBinaryObjectAttribute *)binaryObjectWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a binaryObject.

 @param value The value as an NSString.
 @return A new binaryObject.
*/
+(GCBinaryObjectAttribute *)binaryObjectWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"binaryObject"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCBirthAttribute {
	GCBornToFamilyRelationship *_bornToFamily;
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a birth.

 
 @return A new birth.
*/
+(GCBirthAttribute *)birth
{
	return [[self alloc] init];
}
/** Initializes and returns a birth.

 @param value The value as a GCValue object.
 @return A new birth.
*/
+(GCBirthAttribute *)birthWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a birth.

 @param value The value as an NSString.
 @return A new birth.
*/
+(GCBirthAttribute *)birthWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"birth"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setBornToFamily:(GCBornToFamilyRelationship *)obj
{
	if (_bornToFamily) {
		[_bornToFamily setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_bornToFamily = obj;
}

- (GCBornToFamilyRelationship *)bornToFamily
{
	return _bornToFamily;
}



- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCBlessingAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a blessing.

 
 @return A new blessing.
*/
+(GCBlessingAttribute *)blessing
{
	return [[self alloc] init];
}
/** Initializes and returns a blessing.

 @param value The value as a GCValue object.
 @return A new blessing.
*/
+(GCBlessingAttribute *)blessingWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a blessing.

 @param value The value as an NSString.
 @return A new blessing.
*/
+(GCBlessingAttribute *)blessingWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"blessing"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCBornToFamilyRelationship {

}

// Methods:
/** Initializes and returns a bornToFamily.

 
 @return A new bornToFamily.
*/
+(GCBornToFamilyRelationship *)bornToFamily
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"bornToFamily"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCBurialAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a burial.

 
 @return A new burial.
*/
+(GCBurialAttribute *)burial
{
	return [[self alloc] init];
}
/** Initializes and returns a burial.

 @param value The value as a GCValue object.
 @return A new burial.
*/
+(GCBurialAttribute *)burialWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a burial.

 @param value The value as an NSString.
 @return A new burial.
*/
+(GCBurialAttribute *)burialWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"burial"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCCallNumberAttribute {
	GCMediaTypeAttribute *_mediaType;
}

// Methods:
/** Initializes and returns a callNumber.

 
 @return A new callNumber.
*/
+(GCCallNumberAttribute *)callNumber
{
	return [[self alloc] init];
}
/** Initializes and returns a callNumber.

 @param value The value as a GCValue object.
 @return A new callNumber.
*/
+(GCCallNumberAttribute *)callNumberWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a callNumber.

 @param value The value as an NSString.
 @return A new callNumber.
*/
+(GCCallNumberAttribute *)callNumberWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"callNumber"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setMediaType:(GCMediaTypeAttribute *)obj
{
	if (_mediaType) {
		[_mediaType setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_mediaType = obj;
}

- (GCMediaTypeAttribute *)mediaType
{
	return _mediaType;
}


@end

@implementation GCCasteAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a caste.

 
 @return A new caste.
*/
+(GCCasteAttribute *)caste
{
	return [[self alloc] init];
}
/** Initializes and returns a caste.

 @param value The value as a GCValue object.
 @return A new caste.
*/
+(GCCasteAttribute *)casteWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a caste.

 @param value The value as an NSString.
 @return A new caste.
*/
+(GCCasteAttribute *)casteWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"caste"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCCauseAttribute {

}

// Methods:
/** Initializes and returns a cause.

 
 @return A new cause.
*/
+(GCCauseAttribute *)cause
{
	return [[self alloc] init];
}
/** Initializes and returns a cause.

 @param value The value as a GCValue object.
 @return A new cause.
*/
+(GCCauseAttribute *)causeWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a cause.

 @param value The value as an NSString.
 @return A new cause.
*/
+(GCCauseAttribute *)causeWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"cause"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCCensusAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCHusbandDetailAttribute *_husbandDetail;
	GCWifeDetailAttribute *_wifeDetail;
}

// Methods:
/** Initializes and returns a census.

 
 @return A new census.
*/
+(GCCensusAttribute *)census
{
	return [[self alloc] init];
}
/** Initializes and returns a census.

 @param value The value as a GCValue object.
 @return A new census.
*/
+(GCCensusAttribute *)censusWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a census.

 @param value The value as an NSString.
 @return A new census.
*/
+(GCCensusAttribute *)censusWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"census"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setHusbandDetail:(GCHusbandDetailAttribute *)obj
{
	if (_husbandDetail) {
		[_husbandDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_husbandDetail = obj;
}

- (GCHusbandDetailAttribute *)husbandDetail
{
	return _husbandDetail;
}


- (void)setWifeDetail:(GCWifeDetailAttribute *)obj
{
	if (_wifeDetail) {
		[_wifeDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_wifeDetail = obj;
}

- (GCWifeDetailAttribute *)wifeDetail
{
	return _wifeDetail;
}


@end

@implementation GCCharacterSetAttribute {
	GCVersionAttribute *_version;
}

// Methods:
/** Initializes and returns a characterSet.

 
 @return A new characterSet.
*/
+(GCCharacterSetAttribute *)characterSet
{
	return [[self alloc] init];
}
/** Initializes and returns a characterSet.

 @param value The value as a GCValue object.
 @return A new characterSet.
*/
+(GCCharacterSetAttribute *)characterSetWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a characterSet.

 @param value The value as an NSString.
 @return A new characterSet.
*/
+(GCCharacterSetAttribute *)characterSetWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"characterSet"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setVersion:(GCVersionAttribute *)obj
{
	if (_version) {
		[_version setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_version = obj;
}

- (GCVersionAttribute *)version
{
	return _version;
}


@end

@implementation GCChildRelationship {

}

// Methods:
/** Initializes and returns a child.

 
 @return A new child.
*/
+(GCChildRelationship *)child
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"child"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCChildInFamilyRelationship {
	GCPedigreeAttribute *_pedigree;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a childInFamily.

 
 @return A new childInFamily.
*/
+(GCChildInFamilyRelationship *)childInFamily
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"childInFamily"];
	
	if (self) {
		// initialize ivars, if any:
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setPedigree:(GCPedigreeAttribute *)obj
{
	if (_pedigree) {
		[_pedigree setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_pedigree = obj;
}

- (GCPedigreeAttribute *)pedigree
{
	return _pedigree;
}



- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCChristeningAttribute {
	GCChildInFamilyRelationship *_childInFamily;
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a christening.

 
 @return A new christening.
*/
+(GCChristeningAttribute *)christening
{
	return [[self alloc] init];
}
/** Initializes and returns a christening.

 @param value The value as a GCValue object.
 @return A new christening.
*/
+(GCChristeningAttribute *)christeningWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a christening.

 @param value The value as an NSString.
 @return A new christening.
*/
+(GCChristeningAttribute *)christeningWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"christening"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setChildInFamily:(GCChildInFamilyRelationship *)obj
{
	if (_childInFamily) {
		[_childInFamily setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_childInFamily = obj;
}

- (GCChildInFamilyRelationship *)childInFamily
{
	return _childInFamily;
}



- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCCityAttribute {

}

// Methods:
/** Initializes and returns a city.

 
 @return A new city.
*/
+(GCCityAttribute *)city
{
	return [[self alloc] init];
}
/** Initializes and returns a city.

 @param value The value as a GCValue object.
 @return A new city.
*/
+(GCCityAttribute *)cityWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a city.

 @param value The value as an NSString.
 @return A new city.
*/
+(GCCityAttribute *)cityWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"city"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCConfirmationAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a confirmation.

 
 @return A new confirmation.
*/
+(GCConfirmationAttribute *)confirmation
{
	return [[self alloc] init];
}
/** Initializes and returns a confirmation.

 @param value The value as a GCValue object.
 @return A new confirmation.
*/
+(GCConfirmationAttribute *)confirmationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a confirmation.

 @param value The value as an NSString.
 @return A new confirmation.
*/
+(GCConfirmationAttribute *)confirmationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"confirmation"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCCopyrightAttribute {

}

// Methods:
/** Initializes and returns a copyright.

 
 @return A new copyright.
*/
+(GCCopyrightAttribute *)copyright
{
	return [[self alloc] init];
}
/** Initializes and returns a copyright.

 @param value The value as a GCValue object.
 @return A new copyright.
*/
+(GCCopyrightAttribute *)copyrightWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a copyright.

 @param value The value as an NSString.
 @return A new copyright.
*/
+(GCCopyrightAttribute *)copyrightWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"copyright"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCCorporationAttribute {
	GCAddressAttribute *_address;
	NSMutableArray *_phoneNumbers;
}

// Methods:
/** Initializes and returns a corporation.

 
 @return A new corporation.
*/
+(GCCorporationAttribute *)corporation
{
	return [[self alloc] init];
}
/** Initializes and returns a corporation.

 @param value The value as a GCValue object.
 @return A new corporation.
*/
+(GCCorporationAttribute *)corporationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a corporation.

 @param value The value as an NSString.
 @return A new corporation.
*/
+(GCCorporationAttribute *)corporationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"corporation"];
	
	if (self) {
		// initialize ivars, if any:
		_phoneNumbers = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (NSMutableArray *)mutablePhoneNumbers {
    return [self mutableArrayValueForKey:@"phoneNumbers"];
}

- (NSUInteger)countOfPhoneNumbers {
	return [_phoneNumbers count];
}

- (id)objectInPhoneNumbersAtIndex:(NSUInteger)index {
    return [_phoneNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCPhoneNumberAttribute *)obj inPhoneNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCPhoneNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_phoneNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromPhoneNumbersAtIndex:(NSUInteger)index {
	((GCPhoneNumberAttribute *)_phoneNumbers[index]).describedObject = nil;
    [_phoneNumbers removeObjectAtIndex:index];
}
	

@end

@implementation GCCountryAttribute {

}

// Methods:
/** Initializes and returns a country.

 
 @return A new country.
*/
+(GCCountryAttribute *)country
{
	return [[self alloc] init];
}
/** Initializes and returns a country.

 @param value The value as a GCValue object.
 @return A new country.
*/
+(GCCountryAttribute *)countryWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a country.

 @param value The value as an NSString.
 @return A new country.
*/
+(GCCountryAttribute *)countryWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"country"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCCremationAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a cremation.

 
 @return A new cremation.
*/
+(GCCremationAttribute *)cremation
{
	return [[self alloc] init];
}
/** Initializes and returns a cremation.

 @param value The value as a GCValue object.
 @return A new cremation.
*/
+(GCCremationAttribute *)cremationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a cremation.

 @param value The value as an NSString.
 @return A new cremation.
*/
+(GCCremationAttribute *)cremationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"cremation"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCDataAttribute {
	GCDateAttribute *_date;
	NSMutableArray *_texts;
}

// Methods:
/** Initializes and returns a data.

 
 @return A new data.
*/
+(GCDataAttribute *)data
{
	return [[self alloc] init];
}
/** Initializes and returns a data.

 @param value The value as a GCValue object.
 @return A new data.
*/
+(GCDataAttribute *)dataWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a data.

 @param value The value as an NSString.
 @return A new data.
*/
+(GCDataAttribute *)dataWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"data"];
	
	if (self) {
		// initialize ivars, if any:
		_texts = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (NSMutableArray *)mutableTexts {
    return [self mutableArrayValueForKey:@"texts"];
}

- (NSUInteger)countOfTexts {
	return [_texts count];
}

- (id)objectInTextsAtIndex:(NSUInteger)index {
    return [_texts objectAtIndex:index];
}
 
- (void)insertObject:(GCTextAttribute *)obj inTextsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCTextAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_texts insertObject:obj atIndex:index];
}

- (void)removeObjectFromTextsAtIndex:(NSUInteger)index {
	((GCTextAttribute *)_texts[index]).describedObject = nil;
    [_texts removeObjectAtIndex:index];
}
	

@end

@implementation GCDateAttribute {

}

// Methods:
/** Initializes and returns a date.

 
 @return A new date.
*/
+(GCDateAttribute *)date
{
	return [[self alloc] init];
}
/** Initializes and returns a date.

 @param value The value as a GCValue object.
 @return A new date.
*/
+(GCDateAttribute *)dateWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a date.

 @param value The value as an NSString.
 @return A new date.
*/
+(GCDateAttribute *)dateWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"date"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCDeathAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a death.

 
 @return A new death.
*/
+(GCDeathAttribute *)death
{
	return [[self alloc] init];
}
/** Initializes and returns a death.

 @param value The value as a GCValue object.
 @return A new death.
*/
+(GCDeathAttribute *)deathWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a death.

 @param value The value as an NSString.
 @return A new death.
*/
+(GCDeathAttribute *)deathWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"death"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCDescendantInterestRelationship {

}

// Methods:
/** Initializes and returns a descendantInterest.

 
 @return A new descendantInterest.
*/
+(GCDescendantInterestRelationship *)descendantInterest
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"descendantInterest"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCDescriptiveNameAttribute {

}

// Methods:
/** Initializes and returns a descriptiveName.

 
 @return A new descriptiveName.
*/
+(GCDescriptiveNameAttribute *)descriptiveName
{
	return [[self alloc] init];
}
/** Initializes and returns a descriptiveName.

 @param value The value as a GCValue object.
 @return A new descriptiveName.
*/
+(GCDescriptiveNameAttribute *)descriptiveNameWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a descriptiveName.

 @param value The value as an NSString.
 @return A new descriptiveName.
*/
+(GCDescriptiveNameAttribute *)descriptiveNameWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"descriptiveName"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCDestinationAttribute {

}

// Methods:
/** Initializes and returns a destination.

 
 @return A new destination.
*/
+(GCDestinationAttribute *)destination
{
	return [[self alloc] init];
}
/** Initializes and returns a destination.

 @param value The value as a GCValue object.
 @return A new destination.
*/
+(GCDestinationAttribute *)destinationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a destination.

 @param value The value as an NSString.
 @return A new destination.
*/
+(GCDestinationAttribute *)destinationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"destination"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCDivorceAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCHusbandDetailAttribute *_husbandDetail;
	GCWifeDetailAttribute *_wifeDetail;
}

// Methods:
/** Initializes and returns a divorce.

 
 @return A new divorce.
*/
+(GCDivorceAttribute *)divorce
{
	return [[self alloc] init];
}
/** Initializes and returns a divorce.

 @param value The value as a GCValue object.
 @return A new divorce.
*/
+(GCDivorceAttribute *)divorceWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a divorce.

 @param value The value as an NSString.
 @return A new divorce.
*/
+(GCDivorceAttribute *)divorceWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"divorce"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setHusbandDetail:(GCHusbandDetailAttribute *)obj
{
	if (_husbandDetail) {
		[_husbandDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_husbandDetail = obj;
}

- (GCHusbandDetailAttribute *)husbandDetail
{
	return _husbandDetail;
}


- (void)setWifeDetail:(GCWifeDetailAttribute *)obj
{
	if (_wifeDetail) {
		[_wifeDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_wifeDetail = obj;
}

- (GCWifeDetailAttribute *)wifeDetail
{
	return _wifeDetail;
}


@end

@implementation GCDivorceFiledAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCHusbandDetailAttribute *_husbandDetail;
	GCWifeDetailAttribute *_wifeDetail;
}

// Methods:
/** Initializes and returns a divorceFiled.

 
 @return A new divorceFiled.
*/
+(GCDivorceFiledAttribute *)divorceFiled
{
	return [[self alloc] init];
}
/** Initializes and returns a divorceFiled.

 @param value The value as a GCValue object.
 @return A new divorceFiled.
*/
+(GCDivorceFiledAttribute *)divorceFiledWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a divorceFiled.

 @param value The value as an NSString.
 @return A new divorceFiled.
*/
+(GCDivorceFiledAttribute *)divorceFiledWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"divorceFiled"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setHusbandDetail:(GCHusbandDetailAttribute *)obj
{
	if (_husbandDetail) {
		[_husbandDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_husbandDetail = obj;
}

- (GCHusbandDetailAttribute *)husbandDetail
{
	return _husbandDetail;
}


- (void)setWifeDetail:(GCWifeDetailAttribute *)obj
{
	if (_wifeDetail) {
		[_wifeDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_wifeDetail = obj;
}

- (GCWifeDetailAttribute *)wifeDetail
{
	return _wifeDetail;
}


@end

@implementation GCEducationAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a education.

 
 @return A new education.
*/
+(GCEducationAttribute *)education
{
	return [[self alloc] init];
}
/** Initializes and returns a education.

 @param value The value as a GCValue object.
 @return A new education.
*/
+(GCEducationAttribute *)educationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a education.

 @param value The value as an NSString.
 @return A new education.
*/
+(GCEducationAttribute *)educationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"education"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCEmigrationAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a emigration.

 
 @return A new emigration.
*/
+(GCEmigrationAttribute *)emigration
{
	return [[self alloc] init];
}
/** Initializes and returns a emigration.

 @param value The value as a GCValue object.
 @return A new emigration.
*/
+(GCEmigrationAttribute *)emigrationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a emigration.

 @param value The value as an NSString.
 @return A new emigration.
*/
+(GCEmigrationAttribute *)emigrationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"emigration"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCEngagementAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCHusbandDetailAttribute *_husbandDetail;
	GCWifeDetailAttribute *_wifeDetail;
}

// Methods:
/** Initializes and returns a engagement.

 
 @return A new engagement.
*/
+(GCEngagementAttribute *)engagement
{
	return [[self alloc] init];
}
/** Initializes and returns a engagement.

 @param value The value as a GCValue object.
 @return A new engagement.
*/
+(GCEngagementAttribute *)engagementWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a engagement.

 @param value The value as an NSString.
 @return A new engagement.
*/
+(GCEngagementAttribute *)engagementWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"engagement"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setHusbandDetail:(GCHusbandDetailAttribute *)obj
{
	if (_husbandDetail) {
		[_husbandDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_husbandDetail = obj;
}

- (GCHusbandDetailAttribute *)husbandDetail
{
	return _husbandDetail;
}


- (void)setWifeDetail:(GCWifeDetailAttribute *)obj
{
	if (_wifeDetail) {
		[_wifeDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_wifeDetail = obj;
}

- (GCWifeDetailAttribute *)wifeDetail
{
	return _wifeDetail;
}


@end

@implementation GCEventCitedAttribute {
	GCRoleAttribute *_role;
}

// Methods:
/** Initializes and returns a eventCited.

 
 @return A new eventCited.
*/
+(GCEventCitedAttribute *)eventCited
{
	return [[self alloc] init];
}
/** Initializes and returns a eventCited.

 @param value The value as a GCValue object.
 @return A new eventCited.
*/
+(GCEventCitedAttribute *)eventCitedWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a eventCited.

 @param value The value as an NSString.
 @return A new eventCited.
*/
+(GCEventCitedAttribute *)eventCitedWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"eventCited"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setRole:(GCRoleAttribute *)obj
{
	if (_role) {
		[_role setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_role = obj;
}

- (GCRoleAttribute *)role
{
	return _role;
}


@end

@implementation GCEventsRecordedAttribute {
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
}

// Methods:
/** Initializes and returns a eventsRecorded.

 
 @return A new eventsRecorded.
*/
+(GCEventsRecordedAttribute *)eventsRecorded
{
	return [[self alloc] init];
}
/** Initializes and returns a eventsRecorded.

 @param value The value as a GCValue object.
 @return A new eventsRecorded.
*/
+(GCEventsRecordedAttribute *)eventsRecordedWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a eventsRecorded.

 @param value The value as an NSString.
 @return A new eventsRecorded.
*/
+(GCEventsRecordedAttribute *)eventsRecordedWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"eventsRecorded"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


@end

@implementation GCFamilyEntity {
	NSMutableArray *_annulments;
	NSMutableArray *_censuses;
	NSMutableArray *_divorces;
	NSMutableArray *_divorceFileds;
	NSMutableArray *_engagements;
	NSMutableArray *_marriages;
	NSMutableArray *_marriageBanns;
	NSMutableArray *_marriageContracts;
	NSMutableArray *_marriageLicenses;
	NSMutableArray *_marriageSettlements;
	NSMutableArray *_genericEvents;
	GCHusbandRelationship *_husband;
	GCWifeRelationship *_wife;
	NSMutableArray *_children;
	GCNumberOfChildrenAttribute *_numberOfChildren;
	NSMutableArray *_submitterReferences;
	NSMutableArray *_lDSSealingSpouses;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	NSMutableArray *_userReferenceNumbers;
	GCRecordIdNumberAttribute *_recordIdNumber;
	GCChangeInfoAttribute *_changeInfo;
}

// Methods:
/** Initializes and returns a family.

 @param context The context in which to create the entity.
 @return A new family.
*/
+(GCFamilyEntity *)familyInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"family" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_annulments = [NSMutableArray array];
		_censuses = [NSMutableArray array];
		_divorces = [NSMutableArray array];
		_divorceFileds = [NSMutableArray array];
		_engagements = [NSMutableArray array];
		_marriages = [NSMutableArray array];
		_marriageBanns = [NSMutableArray array];
		_marriageContracts = [NSMutableArray array];
		_marriageLicenses = [NSMutableArray array];
		_marriageSettlements = [NSMutableArray array];
		_genericEvents = [NSMutableArray array];
		_children = [NSMutableArray array];
		_submitterReferences = [NSMutableArray array];
		_lDSSealingSpouses = [NSMutableArray array];
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
		_userReferenceNumbers = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (NSMutableArray *)mutableAnnulments {
    return [self mutableArrayValueForKey:@"annulments"];
}

- (NSUInteger)countOfAnnulments {
	return [_annulments count];
}

- (id)objectInAnnulmentsAtIndex:(NSUInteger)index {
    return [_annulments objectAtIndex:index];
}
 
- (void)insertObject:(GCAnnulmentAttribute *)obj inAnnulmentsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCAnnulmentAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_annulments insertObject:obj atIndex:index];
}

- (void)removeObjectFromAnnulmentsAtIndex:(NSUInteger)index {
	((GCAnnulmentAttribute *)_annulments[index]).describedObject = nil;
    [_annulments removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableCensuses {
    return [self mutableArrayValueForKey:@"censuses"];
}

- (NSUInteger)countOfCensuses {
	return [_censuses count];
}

- (id)objectInCensusesAtIndex:(NSUInteger)index {
    return [_censuses objectAtIndex:index];
}
 
- (void)insertObject:(GCCensusAttribute *)obj inCensusesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCCensusAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_censuses insertObject:obj atIndex:index];
}

- (void)removeObjectFromCensusesAtIndex:(NSUInteger)index {
	((GCCensusAttribute *)_censuses[index]).describedObject = nil;
    [_censuses removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableDivorces {
    return [self mutableArrayValueForKey:@"divorces"];
}

- (NSUInteger)countOfDivorces {
	return [_divorces count];
}

- (id)objectInDivorcesAtIndex:(NSUInteger)index {
    return [_divorces objectAtIndex:index];
}
 
- (void)insertObject:(GCDivorceAttribute *)obj inDivorcesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCDivorceAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_divorces insertObject:obj atIndex:index];
}

- (void)removeObjectFromDivorcesAtIndex:(NSUInteger)index {
	((GCDivorceAttribute *)_divorces[index]).describedObject = nil;
    [_divorces removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableDivorceFileds {
    return [self mutableArrayValueForKey:@"divorceFileds"];
}

- (NSUInteger)countOfDivorceFileds {
	return [_divorceFileds count];
}

- (id)objectInDivorceFiledsAtIndex:(NSUInteger)index {
    return [_divorceFileds objectAtIndex:index];
}
 
- (void)insertObject:(GCDivorceFiledAttribute *)obj inDivorceFiledsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCDivorceFiledAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_divorceFileds insertObject:obj atIndex:index];
}

- (void)removeObjectFromDivorceFiledsAtIndex:(NSUInteger)index {
	((GCDivorceFiledAttribute *)_divorceFileds[index]).describedObject = nil;
    [_divorceFileds removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableEngagements {
    return [self mutableArrayValueForKey:@"engagements"];
}

- (NSUInteger)countOfEngagements {
	return [_engagements count];
}

- (id)objectInEngagementsAtIndex:(NSUInteger)index {
    return [_engagements objectAtIndex:index];
}
 
- (void)insertObject:(GCEngagementAttribute *)obj inEngagementsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCEngagementAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_engagements insertObject:obj atIndex:index];
}

- (void)removeObjectFromEngagementsAtIndex:(NSUInteger)index {
	((GCEngagementAttribute *)_engagements[index]).describedObject = nil;
    [_engagements removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMarriages {
    return [self mutableArrayValueForKey:@"marriages"];
}

- (NSUInteger)countOfMarriages {
	return [_marriages count];
}

- (id)objectInMarriagesAtIndex:(NSUInteger)index {
    return [_marriages objectAtIndex:index];
}
 
- (void)insertObject:(GCMarriageAttribute *)obj inMarriagesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMarriageAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_marriages insertObject:obj atIndex:index];
}

- (void)removeObjectFromMarriagesAtIndex:(NSUInteger)index {
	((GCMarriageAttribute *)_marriages[index]).describedObject = nil;
    [_marriages removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMarriageBanns {
    return [self mutableArrayValueForKey:@"marriageBanns"];
}

- (NSUInteger)countOfMarriageBanns {
	return [_marriageBanns count];
}

- (id)objectInMarriageBannsAtIndex:(NSUInteger)index {
    return [_marriageBanns objectAtIndex:index];
}
 
- (void)insertObject:(GCMarriageBannAttribute *)obj inMarriageBannsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMarriageBannAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_marriageBanns insertObject:obj atIndex:index];
}

- (void)removeObjectFromMarriageBannsAtIndex:(NSUInteger)index {
	((GCMarriageBannAttribute *)_marriageBanns[index]).describedObject = nil;
    [_marriageBanns removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMarriageContracts {
    return [self mutableArrayValueForKey:@"marriageContracts"];
}

- (NSUInteger)countOfMarriageContracts {
	return [_marriageContracts count];
}

- (id)objectInMarriageContractsAtIndex:(NSUInteger)index {
    return [_marriageContracts objectAtIndex:index];
}
 
- (void)insertObject:(GCMarriageContractAttribute *)obj inMarriageContractsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMarriageContractAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_marriageContracts insertObject:obj atIndex:index];
}

- (void)removeObjectFromMarriageContractsAtIndex:(NSUInteger)index {
	((GCMarriageContractAttribute *)_marriageContracts[index]).describedObject = nil;
    [_marriageContracts removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMarriageLicenses {
    return [self mutableArrayValueForKey:@"marriageLicenses"];
}

- (NSUInteger)countOfMarriageLicenses {
	return [_marriageLicenses count];
}

- (id)objectInMarriageLicensesAtIndex:(NSUInteger)index {
    return [_marriageLicenses objectAtIndex:index];
}
 
- (void)insertObject:(GCMarriageLicenseAttribute *)obj inMarriageLicensesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMarriageLicenseAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_marriageLicenses insertObject:obj atIndex:index];
}

- (void)removeObjectFromMarriageLicensesAtIndex:(NSUInteger)index {
	((GCMarriageLicenseAttribute *)_marriageLicenses[index]).describedObject = nil;
    [_marriageLicenses removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMarriageSettlements {
    return [self mutableArrayValueForKey:@"marriageSettlements"];
}

- (NSUInteger)countOfMarriageSettlements {
	return [_marriageSettlements count];
}

- (id)objectInMarriageSettlementsAtIndex:(NSUInteger)index {
    return [_marriageSettlements objectAtIndex:index];
}
 
- (void)insertObject:(GCMarriageSettlementAttribute *)obj inMarriageSettlementsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMarriageSettlementAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_marriageSettlements insertObject:obj atIndex:index];
}

- (void)removeObjectFromMarriageSettlementsAtIndex:(NSUInteger)index {
	((GCMarriageSettlementAttribute *)_marriageSettlements[index]).describedObject = nil;
    [_marriageSettlements removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableGenericEvents {
    return [self mutableArrayValueForKey:@"genericEvents"];
}

- (NSUInteger)countOfGenericEvents {
	return [_genericEvents count];
}

- (id)objectInGenericEventsAtIndex:(NSUInteger)index {
    return [_genericEvents objectAtIndex:index];
}
 
- (void)insertObject:(GCGenericEventAttribute *)obj inGenericEventsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCGenericEventAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_genericEvents insertObject:obj atIndex:index];
}

- (void)removeObjectFromGenericEventsAtIndex:(NSUInteger)index {
	((GCGenericEventAttribute *)_genericEvents[index]).describedObject = nil;
    [_genericEvents removeObjectAtIndex:index];
}
	

- (void)setHusband:(GCHusbandRelationship *)obj
{
	if (_husband) {
		[_husband setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_husband = obj;
}

- (GCHusbandRelationship *)husband
{
	return _husband;
}


- (void)setWife:(GCWifeRelationship *)obj
{
	if (_wife) {
		[_wife setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_wife = obj;
}

- (GCWifeRelationship *)wife
{
	return _wife;
}


- (NSMutableArray *)mutableChildren {
    return [self mutableArrayValueForKey:@"children"];
}

- (NSUInteger)countOfChildren {
	return [_children count];
}

- (id)objectInChildrenAtIndex:(NSUInteger)index {
    return [_children objectAtIndex:index];
}
 
- (void)insertObject:(GCChildRelationship *)obj inChildrenAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCChildRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_children insertObject:obj atIndex:index];
}

- (void)removeObjectFromChildrenAtIndex:(NSUInteger)index {
	((GCChildRelationship *)_children[index]).describedObject = nil;
    [_children removeObjectAtIndex:index];
}
	

- (void)setNumberOfChildren:(GCNumberOfChildrenAttribute *)obj
{
	if (_numberOfChildren) {
		[_numberOfChildren setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_numberOfChildren = obj;
}

- (GCNumberOfChildrenAttribute *)numberOfChildren
{
	return _numberOfChildren;
}


- (NSMutableArray *)mutableSubmitterReferences {
    return [self mutableArrayValueForKey:@"submitterReferences"];
}

- (NSUInteger)countOfSubmitterReferences {
	return [_submitterReferences count];
}

- (id)objectInSubmitterReferencesAtIndex:(NSUInteger)index {
    return [_submitterReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCSubmitterReferenceRelationship *)obj inSubmitterReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSubmitterReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_submitterReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromSubmitterReferencesAtIndex:(NSUInteger)index {
	((GCSubmitterReferenceRelationship *)_submitterReferences[index]).describedObject = nil;
    [_submitterReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableLDSSealingSpouses {
    return [self mutableArrayValueForKey:@"lDSSealingSpouses"];
}

- (NSUInteger)countOfLDSSealingSpouses {
	return [_lDSSealingSpouses count];
}

- (id)objectInLDSSealingSpousesAtIndex:(NSUInteger)index {
    return [_lDSSealingSpouses objectAtIndex:index];
}
 
- (void)insertObject:(GCLDSSealingSpouseAttribute *)obj inLDSSealingSpousesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCLDSSealingSpouseAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_lDSSealingSpouses insertObject:obj atIndex:index];
}

- (void)removeObjectFromLDSSealingSpousesAtIndex:(NSUInteger)index {
	((GCLDSSealingSpouseAttribute *)_lDSSealingSpouses[index]).describedObject = nil;
    [_lDSSealingSpouses removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableUserReferenceNumbers {
    return [self mutableArrayValueForKey:@"userReferenceNumbers"];
}

- (NSUInteger)countOfUserReferenceNumbers {
	return [_userReferenceNumbers count];
}

- (id)objectInUserReferenceNumbersAtIndex:(NSUInteger)index {
    return [_userReferenceNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCUserReferenceNumberAttribute *)obj inUserReferenceNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCUserReferenceNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_userReferenceNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromUserReferenceNumbersAtIndex:(NSUInteger)index {
	((GCUserReferenceNumberAttribute *)_userReferenceNumbers[index]).describedObject = nil;
    [_userReferenceNumbers removeObjectAtIndex:index];
}
	

- (void)setRecordIdNumber:(GCRecordIdNumberAttribute *)obj
{
	if (_recordIdNumber) {
		[_recordIdNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_recordIdNumber = obj;
}

- (GCRecordIdNumberAttribute *)recordIdNumber
{
	return _recordIdNumber;
}


- (void)setChangeInfo:(GCChangeInfoAttribute *)obj
{
	if (_changeInfo) {
		[_changeInfo setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_changeInfo = obj;
}

- (GCChangeInfoAttribute *)changeInfo
{
	return _changeInfo;
}


@end

@implementation GCFamilyFileAttribute {

}

// Methods:
/** Initializes and returns a familyFile.

 
 @return A new familyFile.
*/
+(GCFamilyFileAttribute *)familyFile
{
	return [[self alloc] init];
}
/** Initializes and returns a familyFile.

 @param value The value as a GCValue object.
 @return A new familyFile.
*/
+(GCFamilyFileAttribute *)familyFileWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a familyFile.

 @param value The value as an NSString.
 @return A new familyFile.
*/
+(GCFamilyFileAttribute *)familyFileWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"familyFile"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCFileAttribute {

}

// Methods:
/** Initializes and returns a file.

 
 @return A new file.
*/
+(GCFileAttribute *)file
{
	return [[self alloc] init];
}
/** Initializes and returns a file.

 @param value The value as a GCValue object.
 @return A new file.
*/
+(GCFileAttribute *)fileWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a file.

 @param value The value as an NSString.
 @return A new file.
*/
+(GCFileAttribute *)fileWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"file"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCFirstCommunionAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a firstCommunion.

 
 @return A new firstCommunion.
*/
+(GCFirstCommunionAttribute *)firstCommunion
{
	return [[self alloc] init];
}
/** Initializes and returns a firstCommunion.

 @param value The value as a GCValue object.
 @return A new firstCommunion.
*/
+(GCFirstCommunionAttribute *)firstCommunionWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a firstCommunion.

 @param value The value as an NSString.
 @return A new firstCommunion.
*/
+(GCFirstCommunionAttribute *)firstCommunionWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"firstCommunion"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCGedcomAttribute {
	GCVersionAttribute *_version;
	GCGedcomFormatAttribute *_gedcomFormat;
}

// Methods:
/** Initializes and returns a gedcom.

 
 @return A new gedcom.
*/
+(GCGedcomAttribute *)gedcom
{
	return [[self alloc] init];
}
/** Initializes and returns a gedcom.

 @param value The value as a GCValue object.
 @return A new gedcom.
*/
+(GCGedcomAttribute *)gedcomWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a gedcom.

 @param value The value as an NSString.
 @return A new gedcom.
*/
+(GCGedcomAttribute *)gedcomWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"gedcom"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setVersion:(GCVersionAttribute *)obj
{
	if (_version) {
		[_version setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_version = obj;
}

- (GCVersionAttribute *)version
{
	return _version;
}


- (void)setGedcomFormat:(GCGedcomFormatAttribute *)obj
{
	if (_gedcomFormat) {
		[_gedcomFormat setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_gedcomFormat = obj;
}

- (GCGedcomFormatAttribute *)gedcomFormat
{
	return _gedcomFormat;
}


@end

@implementation GCGedcomFormatAttribute {

}

// Methods:
/** Initializes and returns a gedcomFormat.

 
 @return A new gedcomFormat.
*/
+(GCGedcomFormatAttribute *)gedcomFormat
{
	return [[self alloc] init];
}
/** Initializes and returns a gedcomFormat.

 @param value The value as a GCValue object.
 @return A new gedcomFormat.
*/
+(GCGedcomFormatAttribute *)gedcomFormatWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a gedcomFormat.

 @param value The value as an NSString.
 @return A new gedcomFormat.
*/
+(GCGedcomFormatAttribute *)gedcomFormatWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"gedcomFormat"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCGenerationsOfAncestorsAttribute {

}

// Methods:
/** Initializes and returns a generationsOfAncestors.

 
 @return A new generationsOfAncestors.
*/
+(GCGenerationsOfAncestorsAttribute *)generationsOfAncestors
{
	return [[self alloc] init];
}
/** Initializes and returns a generationsOfAncestors.

 @param value The value as a GCValue object.
 @return A new generationsOfAncestors.
*/
+(GCGenerationsOfAncestorsAttribute *)generationsOfAncestorsWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a generationsOfAncestors.

 @param value The value as an NSString.
 @return A new generationsOfAncestors.
*/
+(GCGenerationsOfAncestorsAttribute *)generationsOfAncestorsWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"generationsOfAncestors"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCGenerationsOfDescendantsAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a generationsOfDescendants.

 
 @return A new generationsOfDescendants.
*/
+(GCGenerationsOfDescendantsAttribute *)generationsOfDescendants
{
	return [[self alloc] init];
}
/** Initializes and returns a generationsOfDescendants.

 @param value The value as a GCValue object.
 @return A new generationsOfDescendants.
*/
+(GCGenerationsOfDescendantsAttribute *)generationsOfDescendantsWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a generationsOfDescendants.

 @param value The value as an NSString.
 @return A new generationsOfDescendants.
*/
+(GCGenerationsOfDescendantsAttribute *)generationsOfDescendantsWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"generationsOfDescendants"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCGenericEventAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCHusbandDetailAttribute *_husbandDetail;
	GCWifeDetailAttribute *_wifeDetail;
}

// Methods:
/** Initializes and returns a genericEvent.

 
 @return A new genericEvent.
*/
+(GCGenericEventAttribute *)genericEvent
{
	return [[self alloc] init];
}
/** Initializes and returns a genericEvent.

 @param value The value as a GCValue object.
 @return A new genericEvent.
*/
+(GCGenericEventAttribute *)genericEventWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a genericEvent.

 @param value The value as an NSString.
 @return A new genericEvent.
*/
+(GCGenericEventAttribute *)genericEventWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"genericEvent"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setHusbandDetail:(GCHusbandDetailAttribute *)obj
{
	if (_husbandDetail) {
		[_husbandDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_husbandDetail = obj;
}

- (GCHusbandDetailAttribute *)husbandDetail
{
	return _husbandDetail;
}


- (void)setWifeDetail:(GCWifeDetailAttribute *)obj
{
	if (_wifeDetail) {
		[_wifeDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_wifeDetail = obj;
}

- (GCWifeDetailAttribute *)wifeDetail
{
	return _wifeDetail;
}


@end

@implementation GCGivenNameAttribute {

}

// Methods:
/** Initializes and returns a givenName.

 
 @return A new givenName.
*/
+(GCGivenNameAttribute *)givenName
{
	return [[self alloc] init];
}
/** Initializes and returns a givenName.

 @param value The value as a GCValue object.
 @return A new givenName.
*/
+(GCGivenNameAttribute *)givenNameWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a givenName.

 @param value The value as an NSString.
 @return A new givenName.
*/
+(GCGivenNameAttribute *)givenNameWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"givenName"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCGraduationAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a graduation.

 
 @return A new graduation.
*/
+(GCGraduationAttribute *)graduation
{
	return [[self alloc] init];
}
/** Initializes and returns a graduation.

 @param value The value as a GCValue object.
 @return A new graduation.
*/
+(GCGraduationAttribute *)graduationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a graduation.

 @param value The value as an NSString.
 @return A new graduation.
*/
+(GCGraduationAttribute *)graduationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"graduation"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCHeaderEntity {
	GCHeaderSourceAttribute *_headerSource;
	NSMutableArray *_destinations;
	GCHeaderDateAttribute *_headerDate;
	GCSubmitterReferenceRelationship *_submitterReference;
	NSMutableArray *_submissionReferences;
	GCFileAttribute *_file;
	GCCopyrightAttribute *_copyright;
	GCGedcomAttribute *_gedcom;
	GCCharacterSetAttribute *_characterSet;
	GCLanguageAttribute *_language;
	GCPlaceFormatSpecifierAttribute *_placeFormatSpecifier;
	GCNoteEmbeddedAttribute *_noteEmbedded;
}

// Methods:
/** Initializes and returns a header.

 @param context The context in which to create the entity.
 @return A new header.
*/
+(GCHeaderEntity *)headerInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"header" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_destinations = [NSMutableArray array];
		_submissionReferences = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setHeaderSource:(GCHeaderSourceAttribute *)obj
{
	if (_headerSource) {
		[_headerSource setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_headerSource = obj;
}

- (GCHeaderSourceAttribute *)headerSource
{
	return _headerSource;
}


- (NSMutableArray *)mutableDestinations {
    return [self mutableArrayValueForKey:@"destinations"];
}

- (NSUInteger)countOfDestinations {
	return [_destinations count];
}

- (id)objectInDestinationsAtIndex:(NSUInteger)index {
    return [_destinations objectAtIndex:index];
}
 
- (void)insertObject:(GCDestinationAttribute *)obj inDestinationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCDestinationAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_destinations insertObject:obj atIndex:index];
}

- (void)removeObjectFromDestinationsAtIndex:(NSUInteger)index {
	((GCDestinationAttribute *)_destinations[index]).describedObject = nil;
    [_destinations removeObjectAtIndex:index];
}
	

- (void)setHeaderDate:(GCHeaderDateAttribute *)obj
{
	if (_headerDate) {
		[_headerDate setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_headerDate = obj;
}

- (GCHeaderDateAttribute *)headerDate
{
	return _headerDate;
}


- (void)setSubmitterReference:(GCSubmitterReferenceRelationship *)obj
{
	if (_submitterReference) {
		[_submitterReference setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_submitterReference = obj;
}

- (GCSubmitterReferenceRelationship *)submitterReference
{
	return _submitterReference;
}


- (NSMutableArray *)mutableSubmissionReferences {
    return [self mutableArrayValueForKey:@"submissionReferences"];
}

- (NSUInteger)countOfSubmissionReferences {
	return [_submissionReferences count];
}

- (id)objectInSubmissionReferencesAtIndex:(NSUInteger)index {
    return [_submissionReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCSubmissionReferenceRelationship *)obj inSubmissionReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSubmissionReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_submissionReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromSubmissionReferencesAtIndex:(NSUInteger)index {
	((GCSubmissionReferenceRelationship *)_submissionReferences[index]).describedObject = nil;
    [_submissionReferences removeObjectAtIndex:index];
}
	

- (void)setFile:(GCFileAttribute *)obj
{
	if (_file) {
		[_file setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_file = obj;
}

- (GCFileAttribute *)file
{
	return _file;
}


- (void)setCopyright:(GCCopyrightAttribute *)obj
{
	if (_copyright) {
		[_copyright setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_copyright = obj;
}

- (GCCopyrightAttribute *)copyright
{
	return _copyright;
}


- (void)setGedcom:(GCGedcomAttribute *)obj
{
	if (_gedcom) {
		[_gedcom setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_gedcom = obj;
}

- (GCGedcomAttribute *)gedcom
{
	return _gedcom;
}


- (void)setCharacterSet:(GCCharacterSetAttribute *)obj
{
	if (_characterSet) {
		[_characterSet setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_characterSet = obj;
}

- (GCCharacterSetAttribute *)characterSet
{
	return _characterSet;
}


- (void)setLanguage:(GCLanguageAttribute *)obj
{
	if (_language) {
		[_language setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_language = obj;
}

- (GCLanguageAttribute *)language
{
	return _language;
}


- (void)setPlaceFormatSpecifier:(GCPlaceFormatSpecifierAttribute *)obj
{
	if (_placeFormatSpecifier) {
		[_placeFormatSpecifier setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_placeFormatSpecifier = obj;
}

- (GCPlaceFormatSpecifierAttribute *)placeFormatSpecifier
{
	return _placeFormatSpecifier;
}


- (void)setNoteEmbedded:(GCNoteEmbeddedAttribute *)obj
{
	if (_noteEmbedded) {
		[_noteEmbedded setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_noteEmbedded = obj;
}

- (GCNoteEmbeddedAttribute *)noteEmbedded
{
	return _noteEmbedded;
}


@end

@implementation GCHeaderDateAttribute {
	GCTimeAttribute *_time;
}

// Methods:
/** Initializes and returns a headerDate.

 
 @return A new headerDate.
*/
+(GCHeaderDateAttribute *)headerDate
{
	return [[self alloc] init];
}
/** Initializes and returns a headerDate.

 @param value The value as a GCValue object.
 @return A new headerDate.
*/
+(GCHeaderDateAttribute *)headerDateWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a headerDate.

 @param value The value as an NSString.
 @return A new headerDate.
*/
+(GCHeaderDateAttribute *)headerDateWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"headerDate"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setTime:(GCTimeAttribute *)obj
{
	if (_time) {
		[_time setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_time = obj;
}

- (GCTimeAttribute *)time
{
	return _time;
}


@end

@implementation GCHeaderSourceAttribute {
	GCVersionAttribute *_version;
	GCDescriptiveNameAttribute *_descriptiveName;
	GCCorporationAttribute *_corporation;
	GCHeaderSourceDataAttribute *_headerSourceData;
}

// Methods:
/** Initializes and returns a headerSource.

 
 @return A new headerSource.
*/
+(GCHeaderSourceAttribute *)headerSource
{
	return [[self alloc] init];
}
/** Initializes and returns a headerSource.

 @param value The value as a GCValue object.
 @return A new headerSource.
*/
+(GCHeaderSourceAttribute *)headerSourceWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a headerSource.

 @param value The value as an NSString.
 @return A new headerSource.
*/
+(GCHeaderSourceAttribute *)headerSourceWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"headerSource"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setVersion:(GCVersionAttribute *)obj
{
	if (_version) {
		[_version setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_version = obj;
}

- (GCVersionAttribute *)version
{
	return _version;
}


- (void)setDescriptiveName:(GCDescriptiveNameAttribute *)obj
{
	if (_descriptiveName) {
		[_descriptiveName setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_descriptiveName = obj;
}

- (GCDescriptiveNameAttribute *)descriptiveName
{
	return _descriptiveName;
}


- (void)setCorporation:(GCCorporationAttribute *)obj
{
	if (_corporation) {
		[_corporation setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_corporation = obj;
}

- (GCCorporationAttribute *)corporation
{
	return _corporation;
}


- (void)setHeaderSourceData:(GCHeaderSourceDataAttribute *)obj
{
	if (_headerSourceData) {
		[_headerSourceData setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_headerSourceData = obj;
}

- (GCHeaderSourceDataAttribute *)headerSourceData
{
	return _headerSourceData;
}


@end

@implementation GCHeaderSourceDataAttribute {
	GCDateAttribute *_date;
	GCCopyrightAttribute *_copyright;
}

// Methods:
/** Initializes and returns a headerSourceData.

 
 @return A new headerSourceData.
*/
+(GCHeaderSourceDataAttribute *)headerSourceData
{
	return [[self alloc] init];
}
/** Initializes and returns a headerSourceData.

 @param value The value as a GCValue object.
 @return A new headerSourceData.
*/
+(GCHeaderSourceDataAttribute *)headerSourceDataWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a headerSourceData.

 @param value The value as an NSString.
 @return A new headerSourceData.
*/
+(GCHeaderSourceDataAttribute *)headerSourceDataWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"headerSourceData"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setCopyright:(GCCopyrightAttribute *)obj
{
	if (_copyright) {
		[_copyright setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_copyright = obj;
}

- (GCCopyrightAttribute *)copyright
{
	return _copyright;
}


@end

@implementation GCHusbandRelationship {

}

// Methods:
/** Initializes and returns a husband.

 
 @return A new husband.
*/
+(GCHusbandRelationship *)husband
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"husband"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCHusbandDetailAttribute {
	GCAgeAttribute *_age;
}

// Methods:
/** Initializes and returns a husbandDetail.

 
 @return A new husbandDetail.
*/
+(GCHusbandDetailAttribute *)husbandDetail
{
	return [[self alloc] init];
}
/** Initializes and returns a husbandDetail.

 @param value The value as a GCValue object.
 @return A new husbandDetail.
*/
+(GCHusbandDetailAttribute *)husbandDetailWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a husbandDetail.

 @param value The value as an NSString.
 @return A new husbandDetail.
*/
+(GCHusbandDetailAttribute *)husbandDetailWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"husbandDetail"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


@end

@implementation GCIdentNumberAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a identNumber.

 
 @return A new identNumber.
*/
+(GCIdentNumberAttribute *)identNumber
{
	return [[self alloc] init];
}
/** Initializes and returns a identNumber.

 @param value The value as a GCValue object.
 @return A new identNumber.
*/
+(GCIdentNumberAttribute *)identNumberWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a identNumber.

 @param value The value as an NSString.
 @return A new identNumber.
*/
+(GCIdentNumberAttribute *)identNumberWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"identNumber"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCImmigrationAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a immigration.

 
 @return A new immigration.
*/
+(GCImmigrationAttribute *)immigration
{
	return [[self alloc] init];
}
/** Initializes and returns a immigration.

 @param value The value as a GCValue object.
 @return A new immigration.
*/
+(GCImmigrationAttribute *)immigrationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a immigration.

 @param value The value as an NSString.
 @return A new immigration.
*/
+(GCImmigrationAttribute *)immigrationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"immigration"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCIndividualEntity {
	GCRestrictionNoticeAttribute *_restrictionNotice;
	NSMutableArray *_personalNames;
	GCSexAttribute *_sex;
	NSMutableArray *_births;
	NSMutableArray *_christenings;
	NSMutableArray *_deaths;
	NSMutableArray *_burials;
	NSMutableArray *_cremations;
	NSMutableArray *_adoptions;
	NSMutableArray *_baptisms;
	NSMutableArray *_barMitzvahs;
	NSMutableArray *_basMitzvahs;
	NSMutableArray *_blessings;
	NSMutableArray *_adultChristenings;
	NSMutableArray *_confirmations;
	NSMutableArray *_firstCommunions;
	NSMutableArray *_ordinations;
	NSMutableArray *_naturalizations;
	NSMutableArray *_emigrations;
	NSMutableArray *_immigrations;
	NSMutableArray *_censuses;
	NSMutableArray *_probates;
	NSMutableArray *_wills;
	NSMutableArray *_graduations;
	NSMutableArray *_retirements;
	NSMutableArray *_genericEvents;
	NSMutableArray *_castes;
	NSMutableArray *_physicalDescriptions;
	NSMutableArray *_generationsOfDescendantss;
	NSMutableArray *_educations;
	NSMutableArray *_identNumbers;
	NSMutableArray *_nationalities;
	NSMutableArray *_numberOfChildrens;
	NSMutableArray *_numberOfMarriagess;
	NSMutableArray *_occupations;
	NSMutableArray *_propertyOwneds;
	NSMutableArray *_religions;
	NSMutableArray *_residences;
	NSMutableArray *_socialSecurityNumbers;
	NSMutableArray *_titles;
	NSMutableArray *_lDSBaptisms;
	NSMutableArray *_lDSConfirmations;
	NSMutableArray *_lDSEndowments;
	NSMutableArray *_lDSSealingChilds;
	NSMutableArray *_childInFamilies;
	NSMutableArray *_spouseInFamilies;
	NSMutableArray *_submitterReferences;
	NSMutableArray *_associations;
	NSMutableArray *_aliases;
	NSMutableArray *_ancestorInterests;
	NSMutableArray *_descendantInterests;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	NSMutableArray *_recordFileNumbers;
	NSMutableArray *_ancestralFileNumbers;
	NSMutableArray *_userReferenceNumbers;
	GCRecordIdNumberAttribute *_recordIdNumber;
	GCChangeInfoAttribute *_changeInfo;
}

// Methods:
/** Initializes and returns a individual.

 @param context The context in which to create the entity.
 @return A new individual.
*/
+(GCIndividualEntity *)individualInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"individual" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_personalNames = [NSMutableArray array];
		_births = [NSMutableArray array];
		_christenings = [NSMutableArray array];
		_deaths = [NSMutableArray array];
		_burials = [NSMutableArray array];
		_cremations = [NSMutableArray array];
		_adoptions = [NSMutableArray array];
		_baptisms = [NSMutableArray array];
		_barMitzvahs = [NSMutableArray array];
		_basMitzvahs = [NSMutableArray array];
		_blessings = [NSMutableArray array];
		_adultChristenings = [NSMutableArray array];
		_confirmations = [NSMutableArray array];
		_firstCommunions = [NSMutableArray array];
		_ordinations = [NSMutableArray array];
		_naturalizations = [NSMutableArray array];
		_emigrations = [NSMutableArray array];
		_immigrations = [NSMutableArray array];
		_censuses = [NSMutableArray array];
		_probates = [NSMutableArray array];
		_wills = [NSMutableArray array];
		_graduations = [NSMutableArray array];
		_retirements = [NSMutableArray array];
		_genericEvents = [NSMutableArray array];
		_castes = [NSMutableArray array];
		_physicalDescriptions = [NSMutableArray array];
		_generationsOfDescendantss = [NSMutableArray array];
		_educations = [NSMutableArray array];
		_identNumbers = [NSMutableArray array];
		_nationalities = [NSMutableArray array];
		_numberOfChildrens = [NSMutableArray array];
		_numberOfMarriagess = [NSMutableArray array];
		_occupations = [NSMutableArray array];
		_propertyOwneds = [NSMutableArray array];
		_religions = [NSMutableArray array];
		_residences = [NSMutableArray array];
		_socialSecurityNumbers = [NSMutableArray array];
		_titles = [NSMutableArray array];
		_lDSBaptisms = [NSMutableArray array];
		_lDSConfirmations = [NSMutableArray array];
		_lDSEndowments = [NSMutableArray array];
		_lDSSealingChilds = [NSMutableArray array];
		_childInFamilies = [NSMutableArray array];
		_spouseInFamilies = [NSMutableArray array];
		_submitterReferences = [NSMutableArray array];
		_associations = [NSMutableArray array];
		_aliases = [NSMutableArray array];
		_ancestorInterests = [NSMutableArray array];
		_descendantInterests = [NSMutableArray array];
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
		_recordFileNumbers = [NSMutableArray array];
		_ancestralFileNumbers = [NSMutableArray array];
		_userReferenceNumbers = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setRestrictionNotice:(GCRestrictionNoticeAttribute *)obj
{
	if (_restrictionNotice) {
		[_restrictionNotice setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_restrictionNotice = obj;
}

- (GCRestrictionNoticeAttribute *)restrictionNotice
{
	return _restrictionNotice;
}


- (NSMutableArray *)mutablePersonalNames {
    return [self mutableArrayValueForKey:@"personalNames"];
}

- (NSUInteger)countOfPersonalNames {
	return [_personalNames count];
}

- (id)objectInPersonalNamesAtIndex:(NSUInteger)index {
    return [_personalNames objectAtIndex:index];
}
 
- (void)insertObject:(GCPersonalNameAttribute *)obj inPersonalNamesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCPersonalNameAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_personalNames insertObject:obj atIndex:index];
}

- (void)removeObjectFromPersonalNamesAtIndex:(NSUInteger)index {
	((GCPersonalNameAttribute *)_personalNames[index]).describedObject = nil;
    [_personalNames removeObjectAtIndex:index];
}
	

- (void)setSex:(GCSexAttribute *)obj
{
	if (_sex) {
		[_sex setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_sex = obj;
}

- (GCSexAttribute *)sex
{
	return _sex;
}



- (NSMutableArray *)mutableBirths {
    return [self mutableArrayValueForKey:@"births"];
}

- (NSUInteger)countOfBirths {
	return [_births count];
}

- (id)objectInBirthsAtIndex:(NSUInteger)index {
    return [_births objectAtIndex:index];
}
 
- (void)insertObject:(GCBirthAttribute *)obj inBirthsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCBirthAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_births insertObject:obj atIndex:index];
}

- (void)removeObjectFromBirthsAtIndex:(NSUInteger)index {
	((GCBirthAttribute *)_births[index]).describedObject = nil;
    [_births removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableChristenings {
    return [self mutableArrayValueForKey:@"christenings"];
}

- (NSUInteger)countOfChristenings {
	return [_christenings count];
}

- (id)objectInChristeningsAtIndex:(NSUInteger)index {
    return [_christenings objectAtIndex:index];
}
 
- (void)insertObject:(GCChristeningAttribute *)obj inChristeningsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCChristeningAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_christenings insertObject:obj atIndex:index];
}

- (void)removeObjectFromChristeningsAtIndex:(NSUInteger)index {
	((GCChristeningAttribute *)_christenings[index]).describedObject = nil;
    [_christenings removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableDeaths {
    return [self mutableArrayValueForKey:@"deaths"];
}

- (NSUInteger)countOfDeaths {
	return [_deaths count];
}

- (id)objectInDeathsAtIndex:(NSUInteger)index {
    return [_deaths objectAtIndex:index];
}
 
- (void)insertObject:(GCDeathAttribute *)obj inDeathsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCDeathAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_deaths insertObject:obj atIndex:index];
}

- (void)removeObjectFromDeathsAtIndex:(NSUInteger)index {
	((GCDeathAttribute *)_deaths[index]).describedObject = nil;
    [_deaths removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableBurials {
    return [self mutableArrayValueForKey:@"burials"];
}

- (NSUInteger)countOfBurials {
	return [_burials count];
}

- (id)objectInBurialsAtIndex:(NSUInteger)index {
    return [_burials objectAtIndex:index];
}
 
- (void)insertObject:(GCBurialAttribute *)obj inBurialsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCBurialAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_burials insertObject:obj atIndex:index];
}

- (void)removeObjectFromBurialsAtIndex:(NSUInteger)index {
	((GCBurialAttribute *)_burials[index]).describedObject = nil;
    [_burials removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableCremations {
    return [self mutableArrayValueForKey:@"cremations"];
}

- (NSUInteger)countOfCremations {
	return [_cremations count];
}

- (id)objectInCremationsAtIndex:(NSUInteger)index {
    return [_cremations objectAtIndex:index];
}
 
- (void)insertObject:(GCCremationAttribute *)obj inCremationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCCremationAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_cremations insertObject:obj atIndex:index];
}

- (void)removeObjectFromCremationsAtIndex:(NSUInteger)index {
	((GCCremationAttribute *)_cremations[index]).describedObject = nil;
    [_cremations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableAdoptions {
    return [self mutableArrayValueForKey:@"adoptions"];
}

- (NSUInteger)countOfAdoptions {
	return [_adoptions count];
}

- (id)objectInAdoptionsAtIndex:(NSUInteger)index {
    return [_adoptions objectAtIndex:index];
}
 
- (void)insertObject:(GCAdoptionAttribute *)obj inAdoptionsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCAdoptionAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_adoptions insertObject:obj atIndex:index];
}

- (void)removeObjectFromAdoptionsAtIndex:(NSUInteger)index {
	((GCAdoptionAttribute *)_adoptions[index]).describedObject = nil;
    [_adoptions removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableBaptisms {
    return [self mutableArrayValueForKey:@"baptisms"];
}

- (NSUInteger)countOfBaptisms {
	return [_baptisms count];
}

- (id)objectInBaptismsAtIndex:(NSUInteger)index {
    return [_baptisms objectAtIndex:index];
}
 
- (void)insertObject:(GCBaptismAttribute *)obj inBaptismsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCBaptismAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_baptisms insertObject:obj atIndex:index];
}

- (void)removeObjectFromBaptismsAtIndex:(NSUInteger)index {
	((GCBaptismAttribute *)_baptisms[index]).describedObject = nil;
    [_baptisms removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableBarMitzvahs {
    return [self mutableArrayValueForKey:@"barMitzvahs"];
}

- (NSUInteger)countOfBarMitzvahs {
	return [_barMitzvahs count];
}

- (id)objectInBarMitzvahsAtIndex:(NSUInteger)index {
    return [_barMitzvahs objectAtIndex:index];
}
 
- (void)insertObject:(GCBarMitzvahAttribute *)obj inBarMitzvahsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCBarMitzvahAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_barMitzvahs insertObject:obj atIndex:index];
}

- (void)removeObjectFromBarMitzvahsAtIndex:(NSUInteger)index {
	((GCBarMitzvahAttribute *)_barMitzvahs[index]).describedObject = nil;
    [_barMitzvahs removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableBasMitzvahs {
    return [self mutableArrayValueForKey:@"basMitzvahs"];
}

- (NSUInteger)countOfBasMitzvahs {
	return [_basMitzvahs count];
}

- (id)objectInBasMitzvahsAtIndex:(NSUInteger)index {
    return [_basMitzvahs objectAtIndex:index];
}
 
- (void)insertObject:(GCBasMitzvahAttribute *)obj inBasMitzvahsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCBasMitzvahAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_basMitzvahs insertObject:obj atIndex:index];
}

- (void)removeObjectFromBasMitzvahsAtIndex:(NSUInteger)index {
	((GCBasMitzvahAttribute *)_basMitzvahs[index]).describedObject = nil;
    [_basMitzvahs removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableBlessings {
    return [self mutableArrayValueForKey:@"blessings"];
}

- (NSUInteger)countOfBlessings {
	return [_blessings count];
}

- (id)objectInBlessingsAtIndex:(NSUInteger)index {
    return [_blessings objectAtIndex:index];
}
 
- (void)insertObject:(GCBlessingAttribute *)obj inBlessingsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCBlessingAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_blessings insertObject:obj atIndex:index];
}

- (void)removeObjectFromBlessingsAtIndex:(NSUInteger)index {
	((GCBlessingAttribute *)_blessings[index]).describedObject = nil;
    [_blessings removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableAdultChristenings {
    return [self mutableArrayValueForKey:@"adultChristenings"];
}

- (NSUInteger)countOfAdultChristenings {
	return [_adultChristenings count];
}

- (id)objectInAdultChristeningsAtIndex:(NSUInteger)index {
    return [_adultChristenings objectAtIndex:index];
}
 
- (void)insertObject:(GCAdultChristeningAttribute *)obj inAdultChristeningsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCAdultChristeningAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_adultChristenings insertObject:obj atIndex:index];
}

- (void)removeObjectFromAdultChristeningsAtIndex:(NSUInteger)index {
	((GCAdultChristeningAttribute *)_adultChristenings[index]).describedObject = nil;
    [_adultChristenings removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableConfirmations {
    return [self mutableArrayValueForKey:@"confirmations"];
}

- (NSUInteger)countOfConfirmations {
	return [_confirmations count];
}

- (id)objectInConfirmationsAtIndex:(NSUInteger)index {
    return [_confirmations objectAtIndex:index];
}
 
- (void)insertObject:(GCConfirmationAttribute *)obj inConfirmationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCConfirmationAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_confirmations insertObject:obj atIndex:index];
}

- (void)removeObjectFromConfirmationsAtIndex:(NSUInteger)index {
	((GCConfirmationAttribute *)_confirmations[index]).describedObject = nil;
    [_confirmations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableFirstCommunions {
    return [self mutableArrayValueForKey:@"firstCommunions"];
}

- (NSUInteger)countOfFirstCommunions {
	return [_firstCommunions count];
}

- (id)objectInFirstCommunionsAtIndex:(NSUInteger)index {
    return [_firstCommunions objectAtIndex:index];
}
 
- (void)insertObject:(GCFirstCommunionAttribute *)obj inFirstCommunionsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCFirstCommunionAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_firstCommunions insertObject:obj atIndex:index];
}

- (void)removeObjectFromFirstCommunionsAtIndex:(NSUInteger)index {
	((GCFirstCommunionAttribute *)_firstCommunions[index]).describedObject = nil;
    [_firstCommunions removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableOrdinations {
    return [self mutableArrayValueForKey:@"ordinations"];
}

- (NSUInteger)countOfOrdinations {
	return [_ordinations count];
}

- (id)objectInOrdinationsAtIndex:(NSUInteger)index {
    return [_ordinations objectAtIndex:index];
}
 
- (void)insertObject:(GCOrdinationAttribute *)obj inOrdinationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCOrdinationAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_ordinations insertObject:obj atIndex:index];
}

- (void)removeObjectFromOrdinationsAtIndex:(NSUInteger)index {
	((GCOrdinationAttribute *)_ordinations[index]).describedObject = nil;
    [_ordinations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNaturalizations {
    return [self mutableArrayValueForKey:@"naturalizations"];
}

- (NSUInteger)countOfNaturalizations {
	return [_naturalizations count];
}

- (id)objectInNaturalizationsAtIndex:(NSUInteger)index {
    return [_naturalizations objectAtIndex:index];
}
 
- (void)insertObject:(GCNaturalizationAttribute *)obj inNaturalizationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNaturalizationAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_naturalizations insertObject:obj atIndex:index];
}

- (void)removeObjectFromNaturalizationsAtIndex:(NSUInteger)index {
	((GCNaturalizationAttribute *)_naturalizations[index]).describedObject = nil;
    [_naturalizations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableEmigrations {
    return [self mutableArrayValueForKey:@"emigrations"];
}

- (NSUInteger)countOfEmigrations {
	return [_emigrations count];
}

- (id)objectInEmigrationsAtIndex:(NSUInteger)index {
    return [_emigrations objectAtIndex:index];
}
 
- (void)insertObject:(GCEmigrationAttribute *)obj inEmigrationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCEmigrationAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_emigrations insertObject:obj atIndex:index];
}

- (void)removeObjectFromEmigrationsAtIndex:(NSUInteger)index {
	((GCEmigrationAttribute *)_emigrations[index]).describedObject = nil;
    [_emigrations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableImmigrations {
    return [self mutableArrayValueForKey:@"immigrations"];
}

- (NSUInteger)countOfImmigrations {
	return [_immigrations count];
}

- (id)objectInImmigrationsAtIndex:(NSUInteger)index {
    return [_immigrations objectAtIndex:index];
}
 
- (void)insertObject:(GCImmigrationAttribute *)obj inImmigrationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCImmigrationAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_immigrations insertObject:obj atIndex:index];
}

- (void)removeObjectFromImmigrationsAtIndex:(NSUInteger)index {
	((GCImmigrationAttribute *)_immigrations[index]).describedObject = nil;
    [_immigrations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableCensuses {
    return [self mutableArrayValueForKey:@"censuses"];
}

- (NSUInteger)countOfCensuses {
	return [_censuses count];
}

- (id)objectInCensusesAtIndex:(NSUInteger)index {
    return [_censuses objectAtIndex:index];
}
 
- (void)insertObject:(GCCensusAttribute *)obj inCensusesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCCensusAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_censuses insertObject:obj atIndex:index];
}

- (void)removeObjectFromCensusesAtIndex:(NSUInteger)index {
	((GCCensusAttribute *)_censuses[index]).describedObject = nil;
    [_censuses removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableProbates {
    return [self mutableArrayValueForKey:@"probates"];
}

- (NSUInteger)countOfProbates {
	return [_probates count];
}

- (id)objectInProbatesAtIndex:(NSUInteger)index {
    return [_probates objectAtIndex:index];
}
 
- (void)insertObject:(GCProbateAttribute *)obj inProbatesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCProbateAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_probates insertObject:obj atIndex:index];
}

- (void)removeObjectFromProbatesAtIndex:(NSUInteger)index {
	((GCProbateAttribute *)_probates[index]).describedObject = nil;
    [_probates removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableWills {
    return [self mutableArrayValueForKey:@"wills"];
}

- (NSUInteger)countOfWills {
	return [_wills count];
}

- (id)objectInWillsAtIndex:(NSUInteger)index {
    return [_wills objectAtIndex:index];
}
 
- (void)insertObject:(GCWillAttribute *)obj inWillsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCWillAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_wills insertObject:obj atIndex:index];
}

- (void)removeObjectFromWillsAtIndex:(NSUInteger)index {
	((GCWillAttribute *)_wills[index]).describedObject = nil;
    [_wills removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableGraduations {
    return [self mutableArrayValueForKey:@"graduations"];
}

- (NSUInteger)countOfGraduations {
	return [_graduations count];
}

- (id)objectInGraduationsAtIndex:(NSUInteger)index {
    return [_graduations objectAtIndex:index];
}
 
- (void)insertObject:(GCGraduationAttribute *)obj inGraduationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCGraduationAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_graduations insertObject:obj atIndex:index];
}

- (void)removeObjectFromGraduationsAtIndex:(NSUInteger)index {
	((GCGraduationAttribute *)_graduations[index]).describedObject = nil;
    [_graduations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableRetirements {
    return [self mutableArrayValueForKey:@"retirements"];
}

- (NSUInteger)countOfRetirements {
	return [_retirements count];
}

- (id)objectInRetirementsAtIndex:(NSUInteger)index {
    return [_retirements objectAtIndex:index];
}
 
- (void)insertObject:(GCRetirementAttribute *)obj inRetirementsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCRetirementAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_retirements insertObject:obj atIndex:index];
}

- (void)removeObjectFromRetirementsAtIndex:(NSUInteger)index {
	((GCRetirementAttribute *)_retirements[index]).describedObject = nil;
    [_retirements removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableGenericEvents {
    return [self mutableArrayValueForKey:@"genericEvents"];
}

- (NSUInteger)countOfGenericEvents {
	return [_genericEvents count];
}

- (id)objectInGenericEventsAtIndex:(NSUInteger)index {
    return [_genericEvents objectAtIndex:index];
}
 
- (void)insertObject:(GCGenericEventAttribute *)obj inGenericEventsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCGenericEventAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_genericEvents insertObject:obj atIndex:index];
}

- (void)removeObjectFromGenericEventsAtIndex:(NSUInteger)index {
	((GCGenericEventAttribute *)_genericEvents[index]).describedObject = nil;
    [_genericEvents removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableCastes {
    return [self mutableArrayValueForKey:@"castes"];
}

- (NSUInteger)countOfCastes {
	return [_castes count];
}

- (id)objectInCastesAtIndex:(NSUInteger)index {
    return [_castes objectAtIndex:index];
}
 
- (void)insertObject:(GCCasteAttribute *)obj inCastesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCCasteAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_castes insertObject:obj atIndex:index];
}

- (void)removeObjectFromCastesAtIndex:(NSUInteger)index {
	((GCCasteAttribute *)_castes[index]).describedObject = nil;
    [_castes removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutablePhysicalDescriptions {
    return [self mutableArrayValueForKey:@"physicalDescriptions"];
}

- (NSUInteger)countOfPhysicalDescriptions {
	return [_physicalDescriptions count];
}

- (id)objectInPhysicalDescriptionsAtIndex:(NSUInteger)index {
    return [_physicalDescriptions objectAtIndex:index];
}
 
- (void)insertObject:(GCPhysicalDescriptionAttribute *)obj inPhysicalDescriptionsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCPhysicalDescriptionAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_physicalDescriptions insertObject:obj atIndex:index];
}

- (void)removeObjectFromPhysicalDescriptionsAtIndex:(NSUInteger)index {
	((GCPhysicalDescriptionAttribute *)_physicalDescriptions[index]).describedObject = nil;
    [_physicalDescriptions removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableGenerationsOfDescendantss {
    return [self mutableArrayValueForKey:@"generationsOfDescendantss"];
}

- (NSUInteger)countOfGenerationsOfDescendantss {
	return [_generationsOfDescendantss count];
}

- (id)objectInGenerationsOfDescendantssAtIndex:(NSUInteger)index {
    return [_generationsOfDescendantss objectAtIndex:index];
}
 
- (void)insertObject:(GCGenerationsOfDescendantsAttribute *)obj inGenerationsOfDescendantssAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCGenerationsOfDescendantsAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_generationsOfDescendantss insertObject:obj atIndex:index];
}

- (void)removeObjectFromGenerationsOfDescendantssAtIndex:(NSUInteger)index {
	((GCGenerationsOfDescendantsAttribute *)_generationsOfDescendantss[index]).describedObject = nil;
    [_generationsOfDescendantss removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableEducations {
    return [self mutableArrayValueForKey:@"educations"];
}

- (NSUInteger)countOfEducations {
	return [_educations count];
}

- (id)objectInEducationsAtIndex:(NSUInteger)index {
    return [_educations objectAtIndex:index];
}
 
- (void)insertObject:(GCEducationAttribute *)obj inEducationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCEducationAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_educations insertObject:obj atIndex:index];
}

- (void)removeObjectFromEducationsAtIndex:(NSUInteger)index {
	((GCEducationAttribute *)_educations[index]).describedObject = nil;
    [_educations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableIdentNumbers {
    return [self mutableArrayValueForKey:@"identNumbers"];
}

- (NSUInteger)countOfIdentNumbers {
	return [_identNumbers count];
}

- (id)objectInIdentNumbersAtIndex:(NSUInteger)index {
    return [_identNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCIdentNumberAttribute *)obj inIdentNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCIdentNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_identNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromIdentNumbersAtIndex:(NSUInteger)index {
	((GCIdentNumberAttribute *)_identNumbers[index]).describedObject = nil;
    [_identNumbers removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNationalities {
    return [self mutableArrayValueForKey:@"nationalities"];
}

- (NSUInteger)countOfNationalities {
	return [_nationalities count];
}

- (id)objectInNationalitiesAtIndex:(NSUInteger)index {
    return [_nationalities objectAtIndex:index];
}
 
- (void)insertObject:(GCNationalityAttribute *)obj inNationalitiesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNationalityAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_nationalities insertObject:obj atIndex:index];
}

- (void)removeObjectFromNationalitiesAtIndex:(NSUInteger)index {
	((GCNationalityAttribute *)_nationalities[index]).describedObject = nil;
    [_nationalities removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNumberOfChildrens {
    return [self mutableArrayValueForKey:@"numberOfChildrens"];
}

- (NSUInteger)countOfNumberOfChildrens {
	return [_numberOfChildrens count];
}

- (id)objectInNumberOfChildrensAtIndex:(NSUInteger)index {
    return [_numberOfChildrens objectAtIndex:index];
}
 
- (void)insertObject:(GCNumberOfChildrenAttribute *)obj inNumberOfChildrensAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNumberOfChildrenAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_numberOfChildrens insertObject:obj atIndex:index];
}

- (void)removeObjectFromNumberOfChildrensAtIndex:(NSUInteger)index {
	((GCNumberOfChildrenAttribute *)_numberOfChildrens[index]).describedObject = nil;
    [_numberOfChildrens removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNumberOfMarriagess {
    return [self mutableArrayValueForKey:@"numberOfMarriagess"];
}

- (NSUInteger)countOfNumberOfMarriagess {
	return [_numberOfMarriagess count];
}

- (id)objectInNumberOfMarriagessAtIndex:(NSUInteger)index {
    return [_numberOfMarriagess objectAtIndex:index];
}
 
- (void)insertObject:(GCNumberOfMarriagesAttribute *)obj inNumberOfMarriagessAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNumberOfMarriagesAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_numberOfMarriagess insertObject:obj atIndex:index];
}

- (void)removeObjectFromNumberOfMarriagessAtIndex:(NSUInteger)index {
	((GCNumberOfMarriagesAttribute *)_numberOfMarriagess[index]).describedObject = nil;
    [_numberOfMarriagess removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableOccupations {
    return [self mutableArrayValueForKey:@"occupations"];
}

- (NSUInteger)countOfOccupations {
	return [_occupations count];
}

- (id)objectInOccupationsAtIndex:(NSUInteger)index {
    return [_occupations objectAtIndex:index];
}
 
- (void)insertObject:(GCOccupationAttribute *)obj inOccupationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCOccupationAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_occupations insertObject:obj atIndex:index];
}

- (void)removeObjectFromOccupationsAtIndex:(NSUInteger)index {
	((GCOccupationAttribute *)_occupations[index]).describedObject = nil;
    [_occupations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutablePropertyOwneds {
    return [self mutableArrayValueForKey:@"propertyOwneds"];
}

- (NSUInteger)countOfPropertyOwneds {
	return [_propertyOwneds count];
}

- (id)objectInPropertyOwnedsAtIndex:(NSUInteger)index {
    return [_propertyOwneds objectAtIndex:index];
}
 
- (void)insertObject:(GCPropertyOwnedAttribute *)obj inPropertyOwnedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCPropertyOwnedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_propertyOwneds insertObject:obj atIndex:index];
}

- (void)removeObjectFromPropertyOwnedsAtIndex:(NSUInteger)index {
	((GCPropertyOwnedAttribute *)_propertyOwneds[index]).describedObject = nil;
    [_propertyOwneds removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableReligions {
    return [self mutableArrayValueForKey:@"religions"];
}

- (NSUInteger)countOfReligions {
	return [_religions count];
}

- (id)objectInReligionsAtIndex:(NSUInteger)index {
    return [_religions objectAtIndex:index];
}
 
- (void)insertObject:(GCReligionAttribute *)obj inReligionsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCReligionAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_religions insertObject:obj atIndex:index];
}

- (void)removeObjectFromReligionsAtIndex:(NSUInteger)index {
	((GCReligionAttribute *)_religions[index]).describedObject = nil;
    [_religions removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableResidences {
    return [self mutableArrayValueForKey:@"residences"];
}

- (NSUInteger)countOfResidences {
	return [_residences count];
}

- (id)objectInResidencesAtIndex:(NSUInteger)index {
    return [_residences objectAtIndex:index];
}
 
- (void)insertObject:(GCResidenceAttribute *)obj inResidencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCResidenceAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_residences insertObject:obj atIndex:index];
}

- (void)removeObjectFromResidencesAtIndex:(NSUInteger)index {
	((GCResidenceAttribute *)_residences[index]).describedObject = nil;
    [_residences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSocialSecurityNumbers {
    return [self mutableArrayValueForKey:@"socialSecurityNumbers"];
}

- (NSUInteger)countOfSocialSecurityNumbers {
	return [_socialSecurityNumbers count];
}

- (id)objectInSocialSecurityNumbersAtIndex:(NSUInteger)index {
    return [_socialSecurityNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCSocialSecurityNumberAttribute *)obj inSocialSecurityNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSocialSecurityNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_socialSecurityNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromSocialSecurityNumbersAtIndex:(NSUInteger)index {
	((GCSocialSecurityNumberAttribute *)_socialSecurityNumbers[index]).describedObject = nil;
    [_socialSecurityNumbers removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableTitles {
    return [self mutableArrayValueForKey:@"titles"];
}

- (NSUInteger)countOfTitles {
	return [_titles count];
}

- (id)objectInTitlesAtIndex:(NSUInteger)index {
    return [_titles objectAtIndex:index];
}
 
- (void)insertObject:(GCTitleAttribute *)obj inTitlesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCTitleAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_titles insertObject:obj atIndex:index];
}

- (void)removeObjectFromTitlesAtIndex:(NSUInteger)index {
	((GCTitleAttribute *)_titles[index]).describedObject = nil;
    [_titles removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableLDSBaptisms {
    return [self mutableArrayValueForKey:@"lDSBaptisms"];
}

- (NSUInteger)countOfLDSBaptisms {
	return [_lDSBaptisms count];
}

- (id)objectInLDSBaptismsAtIndex:(NSUInteger)index {
    return [_lDSBaptisms objectAtIndex:index];
}
 
- (void)insertObject:(GCLDSBaptismAttribute *)obj inLDSBaptismsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCLDSBaptismAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_lDSBaptisms insertObject:obj atIndex:index];
}

- (void)removeObjectFromLDSBaptismsAtIndex:(NSUInteger)index {
	((GCLDSBaptismAttribute *)_lDSBaptisms[index]).describedObject = nil;
    [_lDSBaptisms removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableLDSConfirmations {
    return [self mutableArrayValueForKey:@"lDSConfirmations"];
}

- (NSUInteger)countOfLDSConfirmations {
	return [_lDSConfirmations count];
}

- (id)objectInLDSConfirmationsAtIndex:(NSUInteger)index {
    return [_lDSConfirmations objectAtIndex:index];
}
 
- (void)insertObject:(GCLDSConfirmationAttribute *)obj inLDSConfirmationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCLDSConfirmationAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_lDSConfirmations insertObject:obj atIndex:index];
}

- (void)removeObjectFromLDSConfirmationsAtIndex:(NSUInteger)index {
	((GCLDSConfirmationAttribute *)_lDSConfirmations[index]).describedObject = nil;
    [_lDSConfirmations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableLDSEndowments {
    return [self mutableArrayValueForKey:@"lDSEndowments"];
}

- (NSUInteger)countOfLDSEndowments {
	return [_lDSEndowments count];
}

- (id)objectInLDSEndowmentsAtIndex:(NSUInteger)index {
    return [_lDSEndowments objectAtIndex:index];
}
 
- (void)insertObject:(GCLDSEndowmentAttribute *)obj inLDSEndowmentsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCLDSEndowmentAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_lDSEndowments insertObject:obj atIndex:index];
}

- (void)removeObjectFromLDSEndowmentsAtIndex:(NSUInteger)index {
	((GCLDSEndowmentAttribute *)_lDSEndowments[index]).describedObject = nil;
    [_lDSEndowments removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableLDSSealingChilds {
    return [self mutableArrayValueForKey:@"lDSSealingChilds"];
}

- (NSUInteger)countOfLDSSealingChilds {
	return [_lDSSealingChilds count];
}

- (id)objectInLDSSealingChildsAtIndex:(NSUInteger)index {
    return [_lDSSealingChilds objectAtIndex:index];
}
 
- (void)insertObject:(GCLDSSealingChildAttribute *)obj inLDSSealingChildsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCLDSSealingChildAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_lDSSealingChilds insertObject:obj atIndex:index];
}

- (void)removeObjectFromLDSSealingChildsAtIndex:(NSUInteger)index {
	((GCLDSSealingChildAttribute *)_lDSSealingChilds[index]).describedObject = nil;
    [_lDSSealingChilds removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableChildInFamilies {
    return [self mutableArrayValueForKey:@"childInFamilies"];
}

- (NSUInteger)countOfChildInFamilies {
	return [_childInFamilies count];
}

- (id)objectInChildInFamiliesAtIndex:(NSUInteger)index {
    return [_childInFamilies objectAtIndex:index];
}
 
- (void)insertObject:(GCChildInFamilyRelationship *)obj inChildInFamiliesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCChildInFamilyRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_childInFamilies insertObject:obj atIndex:index];
}

- (void)removeObjectFromChildInFamiliesAtIndex:(NSUInteger)index {
	((GCChildInFamilyRelationship *)_childInFamilies[index]).describedObject = nil;
    [_childInFamilies removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSpouseInFamilies {
    return [self mutableArrayValueForKey:@"spouseInFamilies"];
}

- (NSUInteger)countOfSpouseInFamilies {
	return [_spouseInFamilies count];
}

- (id)objectInSpouseInFamiliesAtIndex:(NSUInteger)index {
    return [_spouseInFamilies objectAtIndex:index];
}
 
- (void)insertObject:(GCSpouseInFamilyRelationship *)obj inSpouseInFamiliesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSpouseInFamilyRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_spouseInFamilies insertObject:obj atIndex:index];
}

- (void)removeObjectFromSpouseInFamiliesAtIndex:(NSUInteger)index {
	((GCSpouseInFamilyRelationship *)_spouseInFamilies[index]).describedObject = nil;
    [_spouseInFamilies removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSubmitterReferences {
    return [self mutableArrayValueForKey:@"submitterReferences"];
}

- (NSUInteger)countOfSubmitterReferences {
	return [_submitterReferences count];
}

- (id)objectInSubmitterReferencesAtIndex:(NSUInteger)index {
    return [_submitterReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCSubmitterReferenceRelationship *)obj inSubmitterReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSubmitterReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_submitterReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromSubmitterReferencesAtIndex:(NSUInteger)index {
	((GCSubmitterReferenceRelationship *)_submitterReferences[index]).describedObject = nil;
    [_submitterReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableAssociations {
    return [self mutableArrayValueForKey:@"associations"];
}

- (NSUInteger)countOfAssociations {
	return [_associations count];
}

- (id)objectInAssociationsAtIndex:(NSUInteger)index {
    return [_associations objectAtIndex:index];
}
 
- (void)insertObject:(GCAssociationRelationship *)obj inAssociationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCAssociationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_associations insertObject:obj atIndex:index];
}

- (void)removeObjectFromAssociationsAtIndex:(NSUInteger)index {
	((GCAssociationRelationship *)_associations[index]).describedObject = nil;
    [_associations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableAliases {
    return [self mutableArrayValueForKey:@"aliases"];
}

- (NSUInteger)countOfAliases {
	return [_aliases count];
}

- (id)objectInAliasesAtIndex:(NSUInteger)index {
    return [_aliases objectAtIndex:index];
}
 
- (void)insertObject:(GCAliasRelationship *)obj inAliasesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCAliasRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_aliases insertObject:obj atIndex:index];
}

- (void)removeObjectFromAliasesAtIndex:(NSUInteger)index {
	((GCAliasRelationship *)_aliases[index]).describedObject = nil;
    [_aliases removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableAncestorInterests {
    return [self mutableArrayValueForKey:@"ancestorInterests"];
}

- (NSUInteger)countOfAncestorInterests {
	return [_ancestorInterests count];
}

- (id)objectInAncestorInterestsAtIndex:(NSUInteger)index {
    return [_ancestorInterests objectAtIndex:index];
}
 
- (void)insertObject:(GCAncestorInterestRelationship *)obj inAncestorInterestsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCAncestorInterestRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_ancestorInterests insertObject:obj atIndex:index];
}

- (void)removeObjectFromAncestorInterestsAtIndex:(NSUInteger)index {
	((GCAncestorInterestRelationship *)_ancestorInterests[index]).describedObject = nil;
    [_ancestorInterests removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableDescendantInterests {
    return [self mutableArrayValueForKey:@"descendantInterests"];
}

- (NSUInteger)countOfDescendantInterests {
	return [_descendantInterests count];
}

- (id)objectInDescendantInterestsAtIndex:(NSUInteger)index {
    return [_descendantInterests objectAtIndex:index];
}
 
- (void)insertObject:(GCDescendantInterestRelationship *)obj inDescendantInterestsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCDescendantInterestRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_descendantInterests insertObject:obj atIndex:index];
}

- (void)removeObjectFromDescendantInterestsAtIndex:(NSUInteger)index {
	((GCDescendantInterestRelationship *)_descendantInterests[index]).describedObject = nil;
    [_descendantInterests removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableRecordFileNumbers {
    return [self mutableArrayValueForKey:@"recordFileNumbers"];
}

- (NSUInteger)countOfRecordFileNumbers {
	return [_recordFileNumbers count];
}

- (id)objectInRecordFileNumbersAtIndex:(NSUInteger)index {
    return [_recordFileNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCRecordFileNumberAttribute *)obj inRecordFileNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCRecordFileNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_recordFileNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromRecordFileNumbersAtIndex:(NSUInteger)index {
	((GCRecordFileNumberAttribute *)_recordFileNumbers[index]).describedObject = nil;
    [_recordFileNumbers removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableAncestralFileNumbers {
    return [self mutableArrayValueForKey:@"ancestralFileNumbers"];
}

- (NSUInteger)countOfAncestralFileNumbers {
	return [_ancestralFileNumbers count];
}

- (id)objectInAncestralFileNumbersAtIndex:(NSUInteger)index {
    return [_ancestralFileNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCAncestralFileNumberAttribute *)obj inAncestralFileNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCAncestralFileNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_ancestralFileNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromAncestralFileNumbersAtIndex:(NSUInteger)index {
	((GCAncestralFileNumberAttribute *)_ancestralFileNumbers[index]).describedObject = nil;
    [_ancestralFileNumbers removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableUserReferenceNumbers {
    return [self mutableArrayValueForKey:@"userReferenceNumbers"];
}

- (NSUInteger)countOfUserReferenceNumbers {
	return [_userReferenceNumbers count];
}

- (id)objectInUserReferenceNumbersAtIndex:(NSUInteger)index {
    return [_userReferenceNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCUserReferenceNumberAttribute *)obj inUserReferenceNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCUserReferenceNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_userReferenceNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromUserReferenceNumbersAtIndex:(NSUInteger)index {
	((GCUserReferenceNumberAttribute *)_userReferenceNumbers[index]).describedObject = nil;
    [_userReferenceNumbers removeObjectAtIndex:index];
}
	

- (void)setRecordIdNumber:(GCRecordIdNumberAttribute *)obj
{
	if (_recordIdNumber) {
		[_recordIdNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_recordIdNumber = obj;
}

- (GCRecordIdNumberAttribute *)recordIdNumber
{
	return _recordIdNumber;
}


- (void)setChangeInfo:(GCChangeInfoAttribute *)obj
{
	if (_changeInfo) {
		[_changeInfo setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_changeInfo = obj;
}

- (GCChangeInfoAttribute *)changeInfo
{
	return _changeInfo;
}


@end

@implementation GCLDSBaptismAttribute {
	GCLDSBaptismStatusAttribute *_lDSBaptismStatus;
	GCDateAttribute *_date;
	GCTempleAttribute *_temple;
	GCPlaceAttribute *_place;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a lDSBaptism.

 
 @return A new lDSBaptism.
*/
+(GCLDSBaptismAttribute *)lDSBaptism
{
	return [[self alloc] init];
}
/** Initializes and returns a lDSBaptism.

 @param value The value as a GCValue object.
 @return A new lDSBaptism.
*/
+(GCLDSBaptismAttribute *)lDSBaptismWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a lDSBaptism.

 @param value The value as an NSString.
 @return A new lDSBaptism.
*/
+(GCLDSBaptismAttribute *)lDSBaptismWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"lDSBaptism"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setLDSBaptismStatus:(GCLDSBaptismStatusAttribute *)obj
{
	if (_lDSBaptismStatus) {
		[_lDSBaptismStatus setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_lDSBaptismStatus = obj;
}

- (GCLDSBaptismStatusAttribute *)lDSBaptismStatus
{
	return _lDSBaptismStatus;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setTemple:(GCTempleAttribute *)obj
{
	if (_temple) {
		[_temple setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_temple = obj;
}

- (GCTempleAttribute *)temple
{
	return _temple;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCLDSBaptismStatusAttribute {

}

// Methods:
/** Initializes and returns a lDSBaptismStatus.

 
 @return A new lDSBaptismStatus.
*/
+(GCLDSBaptismStatusAttribute *)lDSBaptismStatus
{
	return [[self alloc] init];
}
/** Initializes and returns a lDSBaptismStatus.

 @param value The value as a GCValue object.
 @return A new lDSBaptismStatus.
*/
+(GCLDSBaptismStatusAttribute *)lDSBaptismStatusWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a lDSBaptismStatus.

 @param value The value as an NSString.
 @return A new lDSBaptismStatus.
*/
+(GCLDSBaptismStatusAttribute *)lDSBaptismStatusWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"lDSBaptismStatus"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCLDSConfirmationAttribute {
	GCLDSBaptismStatusAttribute *_lDSBaptismStatus;
	GCDateAttribute *_date;
	GCTempleAttribute *_temple;
	GCPlaceAttribute *_place;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a lDSConfirmation.

 
 @return A new lDSConfirmation.
*/
+(GCLDSConfirmationAttribute *)lDSConfirmation
{
	return [[self alloc] init];
}
/** Initializes and returns a lDSConfirmation.

 @param value The value as a GCValue object.
 @return A new lDSConfirmation.
*/
+(GCLDSConfirmationAttribute *)lDSConfirmationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a lDSConfirmation.

 @param value The value as an NSString.
 @return A new lDSConfirmation.
*/
+(GCLDSConfirmationAttribute *)lDSConfirmationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"lDSConfirmation"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setLDSBaptismStatus:(GCLDSBaptismStatusAttribute *)obj
{
	if (_lDSBaptismStatus) {
		[_lDSBaptismStatus setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_lDSBaptismStatus = obj;
}

- (GCLDSBaptismStatusAttribute *)lDSBaptismStatus
{
	return _lDSBaptismStatus;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setTemple:(GCTempleAttribute *)obj
{
	if (_temple) {
		[_temple setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_temple = obj;
}

- (GCTempleAttribute *)temple
{
	return _temple;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCLDSConfirmationStatusAttribute {

}

// Methods:
/** Initializes and returns a lDSConfirmationStatus.

 
 @return A new lDSConfirmationStatus.
*/
+(GCLDSConfirmationStatusAttribute *)lDSConfirmationStatus
{
	return [[self alloc] init];
}
/** Initializes and returns a lDSConfirmationStatus.

 @param value The value as a GCValue object.
 @return A new lDSConfirmationStatus.
*/
+(GCLDSConfirmationStatusAttribute *)lDSConfirmationStatusWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a lDSConfirmationStatus.

 @param value The value as an NSString.
 @return A new lDSConfirmationStatus.
*/
+(GCLDSConfirmationStatusAttribute *)lDSConfirmationStatusWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"lDSConfirmationStatus"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCLDSEndowmentAttribute {
	GCLDSEndowmentStatusAttribute *_lDSEndowmentStatus;
	GCDateAttribute *_date;
	GCTempleAttribute *_temple;
	GCPlaceAttribute *_place;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a lDSEndowment.

 
 @return A new lDSEndowment.
*/
+(GCLDSEndowmentAttribute *)lDSEndowment
{
	return [[self alloc] init];
}
/** Initializes and returns a lDSEndowment.

 @param value The value as a GCValue object.
 @return A new lDSEndowment.
*/
+(GCLDSEndowmentAttribute *)lDSEndowmentWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a lDSEndowment.

 @param value The value as an NSString.
 @return A new lDSEndowment.
*/
+(GCLDSEndowmentAttribute *)lDSEndowmentWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"lDSEndowment"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setLDSEndowmentStatus:(GCLDSEndowmentStatusAttribute *)obj
{
	if (_lDSEndowmentStatus) {
		[_lDSEndowmentStatus setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_lDSEndowmentStatus = obj;
}

- (GCLDSEndowmentStatusAttribute *)lDSEndowmentStatus
{
	return _lDSEndowmentStatus;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setTemple:(GCTempleAttribute *)obj
{
	if (_temple) {
		[_temple setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_temple = obj;
}

- (GCTempleAttribute *)temple
{
	return _temple;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCLDSEndowmentStatusAttribute {

}

// Methods:
/** Initializes and returns a lDSEndowmentStatus.

 
 @return A new lDSEndowmentStatus.
*/
+(GCLDSEndowmentStatusAttribute *)lDSEndowmentStatus
{
	return [[self alloc] init];
}
/** Initializes and returns a lDSEndowmentStatus.

 @param value The value as a GCValue object.
 @return A new lDSEndowmentStatus.
*/
+(GCLDSEndowmentStatusAttribute *)lDSEndowmentStatusWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a lDSEndowmentStatus.

 @param value The value as an NSString.
 @return A new lDSEndowmentStatus.
*/
+(GCLDSEndowmentStatusAttribute *)lDSEndowmentStatusWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"lDSEndowmentStatus"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCLDSSealingChildAttribute {
	GCLDSSealingChildStatusAttribute *_lDSSealingChildStatus;
	GCSealedToFamilyRelationship *_sealedToFamily;
	GCDateAttribute *_date;
	GCTempleAttribute *_temple;
	GCPlaceAttribute *_place;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a lDSSealingChild.

 
 @return A new lDSSealingChild.
*/
+(GCLDSSealingChildAttribute *)lDSSealingChild
{
	return [[self alloc] init];
}
/** Initializes and returns a lDSSealingChild.

 @param value The value as a GCValue object.
 @return A new lDSSealingChild.
*/
+(GCLDSSealingChildAttribute *)lDSSealingChildWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a lDSSealingChild.

 @param value The value as an NSString.
 @return A new lDSSealingChild.
*/
+(GCLDSSealingChildAttribute *)lDSSealingChildWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"lDSSealingChild"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setLDSSealingChildStatus:(GCLDSSealingChildStatusAttribute *)obj
{
	if (_lDSSealingChildStatus) {
		[_lDSSealingChildStatus setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_lDSSealingChildStatus = obj;
}

- (GCLDSSealingChildStatusAttribute *)lDSSealingChildStatus
{
	return _lDSSealingChildStatus;
}


- (void)setSealedToFamily:(GCSealedToFamilyRelationship *)obj
{
	if (_sealedToFamily) {
		[_sealedToFamily setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_sealedToFamily = obj;
}

- (GCSealedToFamilyRelationship *)sealedToFamily
{
	return _sealedToFamily;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setTemple:(GCTempleAttribute *)obj
{
	if (_temple) {
		[_temple setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_temple = obj;
}

- (GCTempleAttribute *)temple
{
	return _temple;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCLDSSealingChildStatusAttribute {

}

// Methods:
/** Initializes and returns a lDSSealingChildStatus.

 
 @return A new lDSSealingChildStatus.
*/
+(GCLDSSealingChildStatusAttribute *)lDSSealingChildStatus
{
	return [[self alloc] init];
}
/** Initializes and returns a lDSSealingChildStatus.

 @param value The value as a GCValue object.
 @return A new lDSSealingChildStatus.
*/
+(GCLDSSealingChildStatusAttribute *)lDSSealingChildStatusWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a lDSSealingChildStatus.

 @param value The value as an NSString.
 @return A new lDSSealingChildStatus.
*/
+(GCLDSSealingChildStatusAttribute *)lDSSealingChildStatusWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"lDSSealingChildStatus"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCLDSSealingSpouseAttribute {
	GCLDSSealingSpouseStatusAttribute *_lDSSealingSpouseStatus;
	GCDateAttribute *_date;
	GCTempleAttribute *_temple;
	GCPlaceAttribute *_place;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a lDSSealingSpouse.

 
 @return A new lDSSealingSpouse.
*/
+(GCLDSSealingSpouseAttribute *)lDSSealingSpouse
{
	return [[self alloc] init];
}
/** Initializes and returns a lDSSealingSpouse.

 @param value The value as a GCValue object.
 @return A new lDSSealingSpouse.
*/
+(GCLDSSealingSpouseAttribute *)lDSSealingSpouseWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a lDSSealingSpouse.

 @param value The value as an NSString.
 @return A new lDSSealingSpouse.
*/
+(GCLDSSealingSpouseAttribute *)lDSSealingSpouseWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"lDSSealingSpouse"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setLDSSealingSpouseStatus:(GCLDSSealingSpouseStatusAttribute *)obj
{
	if (_lDSSealingSpouseStatus) {
		[_lDSSealingSpouseStatus setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_lDSSealingSpouseStatus = obj;
}

- (GCLDSSealingSpouseStatusAttribute *)lDSSealingSpouseStatus
{
	return _lDSSealingSpouseStatus;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setTemple:(GCTempleAttribute *)obj
{
	if (_temple) {
		[_temple setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_temple = obj;
}

- (GCTempleAttribute *)temple
{
	return _temple;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCLDSSealingSpouseStatusAttribute {

}

// Methods:
/** Initializes and returns a lDSSealingSpouseStatus.

 
 @return A new lDSSealingSpouseStatus.
*/
+(GCLDSSealingSpouseStatusAttribute *)lDSSealingSpouseStatus
{
	return [[self alloc] init];
}
/** Initializes and returns a lDSSealingSpouseStatus.

 @param value The value as a GCValue object.
 @return A new lDSSealingSpouseStatus.
*/
+(GCLDSSealingSpouseStatusAttribute *)lDSSealingSpouseStatusWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a lDSSealingSpouseStatus.

 @param value The value as an NSString.
 @return A new lDSSealingSpouseStatus.
*/
+(GCLDSSealingSpouseStatusAttribute *)lDSSealingSpouseStatusWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"lDSSealingSpouseStatus"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCLanguageAttribute {

}

// Methods:
/** Initializes and returns a language.

 
 @return A new language.
*/
+(GCLanguageAttribute *)language
{
	return [[self alloc] init];
}
/** Initializes and returns a language.

 @param value The value as a GCValue object.
 @return A new language.
*/
+(GCLanguageAttribute *)languageWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a language.

 @param value The value as an NSString.
 @return A new language.
*/
+(GCLanguageAttribute *)languageWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"language"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCLegateeAttribute {

}

// Methods:
/** Initializes and returns a legatee.

 
 @return A new legatee.
*/
+(GCLegateeAttribute *)legatee
{
	return [[self alloc] init];
}
/** Initializes and returns a legatee.

 @param value The value as a GCValue object.
 @return A new legatee.
*/
+(GCLegateeAttribute *)legateeWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a legatee.

 @param value The value as an NSString.
 @return A new legatee.
*/
+(GCLegateeAttribute *)legateeWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"legatee"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCMarriageAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCHusbandDetailAttribute *_husbandDetail;
	GCWifeDetailAttribute *_wifeDetail;
}

// Methods:
/** Initializes and returns a marriage.

 
 @return A new marriage.
*/
+(GCMarriageAttribute *)marriage
{
	return [[self alloc] init];
}
/** Initializes and returns a marriage.

 @param value The value as a GCValue object.
 @return A new marriage.
*/
+(GCMarriageAttribute *)marriageWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a marriage.

 @param value The value as an NSString.
 @return A new marriage.
*/
+(GCMarriageAttribute *)marriageWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"marriage"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setHusbandDetail:(GCHusbandDetailAttribute *)obj
{
	if (_husbandDetail) {
		[_husbandDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_husbandDetail = obj;
}

- (GCHusbandDetailAttribute *)husbandDetail
{
	return _husbandDetail;
}


- (void)setWifeDetail:(GCWifeDetailAttribute *)obj
{
	if (_wifeDetail) {
		[_wifeDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_wifeDetail = obj;
}

- (GCWifeDetailAttribute *)wifeDetail
{
	return _wifeDetail;
}


@end

@implementation GCMarriageBannAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCHusbandDetailAttribute *_husbandDetail;
	GCWifeDetailAttribute *_wifeDetail;
}

// Methods:
/** Initializes and returns a marriageBann.

 
 @return A new marriageBann.
*/
+(GCMarriageBannAttribute *)marriageBann
{
	return [[self alloc] init];
}
/** Initializes and returns a marriageBann.

 @param value The value as a GCValue object.
 @return A new marriageBann.
*/
+(GCMarriageBannAttribute *)marriageBannWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a marriageBann.

 @param value The value as an NSString.
 @return A new marriageBann.
*/
+(GCMarriageBannAttribute *)marriageBannWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"marriageBann"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setHusbandDetail:(GCHusbandDetailAttribute *)obj
{
	if (_husbandDetail) {
		[_husbandDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_husbandDetail = obj;
}

- (GCHusbandDetailAttribute *)husbandDetail
{
	return _husbandDetail;
}


- (void)setWifeDetail:(GCWifeDetailAttribute *)obj
{
	if (_wifeDetail) {
		[_wifeDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_wifeDetail = obj;
}

- (GCWifeDetailAttribute *)wifeDetail
{
	return _wifeDetail;
}


@end

@implementation GCMarriageContractAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCHusbandDetailAttribute *_husbandDetail;
	GCWifeDetailAttribute *_wifeDetail;
}

// Methods:
/** Initializes and returns a marriageContract.

 
 @return A new marriageContract.
*/
+(GCMarriageContractAttribute *)marriageContract
{
	return [[self alloc] init];
}
/** Initializes and returns a marriageContract.

 @param value The value as a GCValue object.
 @return A new marriageContract.
*/
+(GCMarriageContractAttribute *)marriageContractWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a marriageContract.

 @param value The value as an NSString.
 @return A new marriageContract.
*/
+(GCMarriageContractAttribute *)marriageContractWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"marriageContract"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setHusbandDetail:(GCHusbandDetailAttribute *)obj
{
	if (_husbandDetail) {
		[_husbandDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_husbandDetail = obj;
}

- (GCHusbandDetailAttribute *)husbandDetail
{
	return _husbandDetail;
}


- (void)setWifeDetail:(GCWifeDetailAttribute *)obj
{
	if (_wifeDetail) {
		[_wifeDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_wifeDetail = obj;
}

- (GCWifeDetailAttribute *)wifeDetail
{
	return _wifeDetail;
}


@end

@implementation GCMarriageLicenseAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCHusbandDetailAttribute *_husbandDetail;
	GCWifeDetailAttribute *_wifeDetail;
}

// Methods:
/** Initializes and returns a marriageLicense.

 
 @return A new marriageLicense.
*/
+(GCMarriageLicenseAttribute *)marriageLicense
{
	return [[self alloc] init];
}
/** Initializes and returns a marriageLicense.

 @param value The value as a GCValue object.
 @return A new marriageLicense.
*/
+(GCMarriageLicenseAttribute *)marriageLicenseWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a marriageLicense.

 @param value The value as an NSString.
 @return A new marriageLicense.
*/
+(GCMarriageLicenseAttribute *)marriageLicenseWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"marriageLicense"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setHusbandDetail:(GCHusbandDetailAttribute *)obj
{
	if (_husbandDetail) {
		[_husbandDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_husbandDetail = obj;
}

- (GCHusbandDetailAttribute *)husbandDetail
{
	return _husbandDetail;
}


- (void)setWifeDetail:(GCWifeDetailAttribute *)obj
{
	if (_wifeDetail) {
		[_wifeDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_wifeDetail = obj;
}

- (GCWifeDetailAttribute *)wifeDetail
{
	return _wifeDetail;
}


@end

@implementation GCMarriageSettlementAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCHusbandDetailAttribute *_husbandDetail;
	GCWifeDetailAttribute *_wifeDetail;
}

// Methods:
/** Initializes and returns a marriageSettlement.

 
 @return A new marriageSettlement.
*/
+(GCMarriageSettlementAttribute *)marriageSettlement
{
	return [[self alloc] init];
}
/** Initializes and returns a marriageSettlement.

 @param value The value as a GCValue object.
 @return A new marriageSettlement.
*/
+(GCMarriageSettlementAttribute *)marriageSettlementWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a marriageSettlement.

 @param value The value as an NSString.
 @return A new marriageSettlement.
*/
+(GCMarriageSettlementAttribute *)marriageSettlementWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"marriageSettlement"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setHusbandDetail:(GCHusbandDetailAttribute *)obj
{
	if (_husbandDetail) {
		[_husbandDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_husbandDetail = obj;
}

- (GCHusbandDetailAttribute *)husbandDetail
{
	return _husbandDetail;
}


- (void)setWifeDetail:(GCWifeDetailAttribute *)obj
{
	if (_wifeDetail) {
		[_wifeDetail setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_wifeDetail = obj;
}

- (GCWifeDetailAttribute *)wifeDetail
{
	return _wifeDetail;
}


@end

@implementation GCMediaTypeAttribute {

}

// Methods:
/** Initializes and returns a mediaType.

 
 @return A new mediaType.
*/
+(GCMediaTypeAttribute *)mediaType
{
	return [[self alloc] init];
}
/** Initializes and returns a mediaType.

 @param value The value as a GCValue object.
 @return A new mediaType.
*/
+(GCMediaTypeAttribute *)mediaTypeWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a mediaType.

 @param value The value as an NSString.
 @return A new mediaType.
*/
+(GCMediaTypeAttribute *)mediaTypeWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"mediaType"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCMultimediaEntity {
	GCMultimediaFormatAttribute *_multimediaFormat;
	GCTitleAttribute *_title;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCBinaryObjectAttribute *_binaryObject;
	NSMutableArray *_userReferenceNumbers;
	GCRecordIdNumberAttribute *_recordIdNumber;
	GCChangeInfoAttribute *_changeInfo;
}

// Methods:
/** Initializes and returns a multimedia.

 @param context The context in which to create the entity.
 @return A new multimedia.
*/
+(GCMultimediaEntity *)multimediaInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"multimedia" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
		_userReferenceNumbers = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setMultimediaFormat:(GCMultimediaFormatAttribute *)obj
{
	if (_multimediaFormat) {
		[_multimediaFormat setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_multimediaFormat = obj;
}

- (GCMultimediaFormatAttribute *)multimediaFormat
{
	return _multimediaFormat;
}


- (void)setTitle:(GCTitleAttribute *)obj
{
	if (_title) {
		[_title setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_title = obj;
}

- (GCTitleAttribute *)title
{
	return _title;
}



- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setBinaryObject:(GCBinaryObjectAttribute *)obj
{
	if (_binaryObject) {
		[_binaryObject setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_binaryObject = obj;
}

- (GCBinaryObjectAttribute *)binaryObject
{
	return _binaryObject;
}


- (NSMutableArray *)mutableUserReferenceNumbers {
    return [self mutableArrayValueForKey:@"userReferenceNumbers"];
}

- (NSUInteger)countOfUserReferenceNumbers {
	return [_userReferenceNumbers count];
}

- (id)objectInUserReferenceNumbersAtIndex:(NSUInteger)index {
    return [_userReferenceNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCUserReferenceNumberAttribute *)obj inUserReferenceNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCUserReferenceNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_userReferenceNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromUserReferenceNumbersAtIndex:(NSUInteger)index {
	((GCUserReferenceNumberAttribute *)_userReferenceNumbers[index]).describedObject = nil;
    [_userReferenceNumbers removeObjectAtIndex:index];
}
	

- (void)setRecordIdNumber:(GCRecordIdNumberAttribute *)obj
{
	if (_recordIdNumber) {
		[_recordIdNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_recordIdNumber = obj;
}

- (GCRecordIdNumberAttribute *)recordIdNumber
{
	return _recordIdNumber;
}


- (void)setChangeInfo:(GCChangeInfoAttribute *)obj
{
	if (_changeInfo) {
		[_changeInfo setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_changeInfo = obj;
}

- (GCChangeInfoAttribute *)changeInfo
{
	return _changeInfo;
}


@end

@implementation GCMultimediaEmbeddedAttribute {
	GCMultimediaFormatAttribute *_multimediaFormat;
	GCTitleAttribute *_title;
	GCFileAttribute *_file;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a multimediaEmbedded.

 
 @return A new multimediaEmbedded.
*/
+(GCMultimediaEmbeddedAttribute *)multimediaEmbedded
{
	return [[self alloc] init];
}
/** Initializes and returns a multimediaEmbedded.

 @param value The value as a GCValue object.
 @return A new multimediaEmbedded.
*/
+(GCMultimediaEmbeddedAttribute *)multimediaEmbeddedWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a multimediaEmbedded.

 @param value The value as an NSString.
 @return A new multimediaEmbedded.
*/
+(GCMultimediaEmbeddedAttribute *)multimediaEmbeddedWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"multimediaEmbedded"];
	
	if (self) {
		// initialize ivars, if any:
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setMultimediaFormat:(GCMultimediaFormatAttribute *)obj
{
	if (_multimediaFormat) {
		[_multimediaFormat setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_multimediaFormat = obj;
}

- (GCMultimediaFormatAttribute *)multimediaFormat
{
	return _multimediaFormat;
}


- (void)setTitle:(GCTitleAttribute *)obj
{
	if (_title) {
		[_title setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_title = obj;
}

- (GCTitleAttribute *)title
{
	return _title;
}


- (void)setFile:(GCFileAttribute *)obj
{
	if (_file) {
		[_file setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_file = obj;
}

- (GCFileAttribute *)file
{
	return _file;
}



- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCMultimediaFormatAttribute {

}

// Methods:
/** Initializes and returns a multimediaFormat.

 
 @return A new multimediaFormat.
*/
+(GCMultimediaFormatAttribute *)multimediaFormat
{
	return [[self alloc] init];
}
/** Initializes and returns a multimediaFormat.

 @param value The value as a GCValue object.
 @return A new multimediaFormat.
*/
+(GCMultimediaFormatAttribute *)multimediaFormatWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a multimediaFormat.

 @param value The value as an NSString.
 @return A new multimediaFormat.
*/
+(GCMultimediaFormatAttribute *)multimediaFormatWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"multimediaFormat"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCMultimediaReferenceRelationship {

}

// Methods:
/** Initializes and returns a multimediaReference.

 
 @return A new multimediaReference.
*/
+(GCMultimediaReferenceRelationship *)multimediaReference
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"multimediaReference"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCNamePrefixAttribute {

}

// Methods:
/** Initializes and returns a namePrefix.

 
 @return A new namePrefix.
*/
+(GCNamePrefixAttribute *)namePrefix
{
	return [[self alloc] init];
}
/** Initializes and returns a namePrefix.

 @param value The value as a GCValue object.
 @return A new namePrefix.
*/
+(GCNamePrefixAttribute *)namePrefixWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a namePrefix.

 @param value The value as an NSString.
 @return A new namePrefix.
*/
+(GCNamePrefixAttribute *)namePrefixWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"namePrefix"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCNameSuffixAttribute {

}

// Methods:
/** Initializes and returns a nameSuffix.

 
 @return A new nameSuffix.
*/
+(GCNameSuffixAttribute *)nameSuffix
{
	return [[self alloc] init];
}
/** Initializes and returns a nameSuffix.

 @param value The value as a GCValue object.
 @return A new nameSuffix.
*/
+(GCNameSuffixAttribute *)nameSuffixWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a nameSuffix.

 @param value The value as an NSString.
 @return A new nameSuffix.
*/
+(GCNameSuffixAttribute *)nameSuffixWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"nameSuffix"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCNationalityAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a nationality.

 
 @return A new nationality.
*/
+(GCNationalityAttribute *)nationality
{
	return [[self alloc] init];
}
/** Initializes and returns a nationality.

 @param value The value as a GCValue object.
 @return A new nationality.
*/
+(GCNationalityAttribute *)nationalityWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a nationality.

 @param value The value as an NSString.
 @return A new nationality.
*/
+(GCNationalityAttribute *)nationalityWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"nationality"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCNaturalizationAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a naturalization.

 
 @return A new naturalization.
*/
+(GCNaturalizationAttribute *)naturalization
{
	return [[self alloc] init];
}
/** Initializes and returns a naturalization.

 @param value The value as a GCValue object.
 @return A new naturalization.
*/
+(GCNaturalizationAttribute *)naturalizationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a naturalization.

 @param value The value as an NSString.
 @return A new naturalization.
*/
+(GCNaturalizationAttribute *)naturalizationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"naturalization"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCNicknameAttribute {

}

// Methods:
/** Initializes and returns a nickname.

 
 @return A new nickname.
*/
+(GCNicknameAttribute *)nickname
{
	return [[self alloc] init];
}
/** Initializes and returns a nickname.

 @param value The value as a GCValue object.
 @return A new nickname.
*/
+(GCNicknameAttribute *)nicknameWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a nickname.

 @param value The value as an NSString.
 @return A new nickname.
*/
+(GCNicknameAttribute *)nicknameWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"nickname"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCNoteEntity {
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_userReferenceNumbers;
	GCRecordIdNumberAttribute *_recordIdNumber;
	GCChangeInfoAttribute *_changeInfo;
}

// Methods:
/** Initializes and returns a note.

 @param context The context in which to create the entity.
 @return A new note.
*/
+(GCNoteEntity *)noteInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"note" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_userReferenceNumbers = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableUserReferenceNumbers {
    return [self mutableArrayValueForKey:@"userReferenceNumbers"];
}

- (NSUInteger)countOfUserReferenceNumbers {
	return [_userReferenceNumbers count];
}

- (id)objectInUserReferenceNumbersAtIndex:(NSUInteger)index {
    return [_userReferenceNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCUserReferenceNumberAttribute *)obj inUserReferenceNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCUserReferenceNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_userReferenceNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromUserReferenceNumbersAtIndex:(NSUInteger)index {
	((GCUserReferenceNumberAttribute *)_userReferenceNumbers[index]).describedObject = nil;
    [_userReferenceNumbers removeObjectAtIndex:index];
}
	

- (void)setRecordIdNumber:(GCRecordIdNumberAttribute *)obj
{
	if (_recordIdNumber) {
		[_recordIdNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_recordIdNumber = obj;
}

- (GCRecordIdNumberAttribute *)recordIdNumber
{
	return _recordIdNumber;
}


- (void)setChangeInfo:(GCChangeInfoAttribute *)obj
{
	if (_changeInfo) {
		[_changeInfo setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_changeInfo = obj;
}

- (GCChangeInfoAttribute *)changeInfo
{
	return _changeInfo;
}


@end

@implementation GCNoteEmbeddedAttribute {
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
}

// Methods:
/** Initializes and returns a noteEmbedded.

 
 @return A new noteEmbedded.
*/
+(GCNoteEmbeddedAttribute *)noteEmbedded
{
	return [[self alloc] init];
}
/** Initializes and returns a noteEmbedded.

 @param value The value as a GCValue object.
 @return A new noteEmbedded.
*/
+(GCNoteEmbeddedAttribute *)noteEmbeddedWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a noteEmbedded.

 @param value The value as an NSString.
 @return A new noteEmbedded.
*/
+(GCNoteEmbeddedAttribute *)noteEmbeddedWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"noteEmbedded"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCNoteReferenceRelationship {
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
}

// Methods:
/** Initializes and returns a noteReference.

 
 @return A new noteReference.
*/
+(GCNoteReferenceRelationship *)noteReference
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"noteReference"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCNumberOfChildrenAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a numberOfChildren.

 
 @return A new numberOfChildren.
*/
+(GCNumberOfChildrenAttribute *)numberOfChildren
{
	return [[self alloc] init];
}
/** Initializes and returns a numberOfChildren.

 @param value The value as a GCValue object.
 @return A new numberOfChildren.
*/
+(GCNumberOfChildrenAttribute *)numberOfChildrenWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a numberOfChildren.

 @param value The value as an NSString.
 @return A new numberOfChildren.
*/
+(GCNumberOfChildrenAttribute *)numberOfChildrenWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"numberOfChildren"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCNumberOfMarriagesAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a numberOfMarriages.

 
 @return A new numberOfMarriages.
*/
+(GCNumberOfMarriagesAttribute *)numberOfMarriages
{
	return [[self alloc] init];
}
/** Initializes and returns a numberOfMarriages.

 @param value The value as a GCValue object.
 @return A new numberOfMarriages.
*/
+(GCNumberOfMarriagesAttribute *)numberOfMarriagesWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a numberOfMarriages.

 @param value The value as an NSString.
 @return A new numberOfMarriages.
*/
+(GCNumberOfMarriagesAttribute *)numberOfMarriagesWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"numberOfMarriages"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCOccupationAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a occupation.

 
 @return A new occupation.
*/
+(GCOccupationAttribute *)occupation
{
	return [[self alloc] init];
}
/** Initializes and returns a occupation.

 @param value The value as a GCValue object.
 @return A new occupation.
*/
+(GCOccupationAttribute *)occupationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a occupation.

 @param value The value as an NSString.
 @return A new occupation.
*/
+(GCOccupationAttribute *)occupationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"occupation"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCOrdinanceFlagAttribute {

}

// Methods:
/** Initializes and returns a ordinanceFlag.

 
 @return A new ordinanceFlag.
*/
+(GCOrdinanceFlagAttribute *)ordinanceFlag
{
	return [[self alloc] init];
}
/** Initializes and returns a ordinanceFlag.

 @param value The value as a GCValue object.
 @return A new ordinanceFlag.
*/
+(GCOrdinanceFlagAttribute *)ordinanceFlagWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a ordinanceFlag.

 @param value The value as an NSString.
 @return A new ordinanceFlag.
*/
+(GCOrdinanceFlagAttribute *)ordinanceFlagWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"ordinanceFlag"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCOrdinationAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a ordination.

 
 @return A new ordination.
*/
+(GCOrdinationAttribute *)ordination
{
	return [[self alloc] init];
}
/** Initializes and returns a ordination.

 @param value The value as a GCValue object.
 @return A new ordination.
*/
+(GCOrdinationAttribute *)ordinationWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a ordination.

 @param value The value as an NSString.
 @return A new ordination.
*/
+(GCOrdinationAttribute *)ordinationWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"ordination"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCPageAttribute {

}

// Methods:
/** Initializes and returns a page.

 
 @return A new page.
*/
+(GCPageAttribute *)page
{
	return [[self alloc] init];
}
/** Initializes and returns a page.

 @param value The value as a GCValue object.
 @return A new page.
*/
+(GCPageAttribute *)pageWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a page.

 @param value The value as an NSString.
 @return A new page.
*/
+(GCPageAttribute *)pageWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"page"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCPedigreeAttribute {
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a pedigree.

 
 @return A new pedigree.
*/
+(GCPedigreeAttribute *)pedigree
{
	return [[self alloc] init];
}
/** Initializes and returns a pedigree.

 @param value The value as a GCValue object.
 @return A new pedigree.
*/
+(GCPedigreeAttribute *)pedigreeWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a pedigree.

 @param value The value as an NSString.
 @return A new pedigree.
*/
+(GCPedigreeAttribute *)pedigreeWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"pedigree"];
	
	if (self) {
		// initialize ivars, if any:
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCPersonalNameAttribute {
	GCNamePrefixAttribute *_namePrefix;
	GCGivenNameAttribute *_givenName;
	GCNicknameAttribute *_nickname;
	GCSurnamePrefixAttribute *_surnamePrefix;
	GCSurnameAttribute *_surname;
	GCNameSuffixAttribute *_nameSuffix;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a personalName.

 
 @return A new personalName.
*/
+(GCPersonalNameAttribute *)personalName
{
	return [[self alloc] init];
}
/** Initializes and returns a personalName.

 @param value The value as a GCValue object.
 @return A new personalName.
*/
+(GCPersonalNameAttribute *)personalNameWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a personalName.

 @param value The value as an NSString.
 @return A new personalName.
*/
+(GCPersonalNameAttribute *)personalNameWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"personalName"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setNamePrefix:(GCNamePrefixAttribute *)obj
{
	if (_namePrefix) {
		[_namePrefix setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_namePrefix = obj;
}

- (GCNamePrefixAttribute *)namePrefix
{
	return _namePrefix;
}


- (void)setGivenName:(GCGivenNameAttribute *)obj
{
	if (_givenName) {
		[_givenName setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_givenName = obj;
}

- (GCGivenNameAttribute *)givenName
{
	return _givenName;
}


- (void)setNickname:(GCNicknameAttribute *)obj
{
	if (_nickname) {
		[_nickname setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_nickname = obj;
}

- (GCNicknameAttribute *)nickname
{
	return _nickname;
}


- (void)setSurnamePrefix:(GCSurnamePrefixAttribute *)obj
{
	if (_surnamePrefix) {
		[_surnamePrefix setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_surnamePrefix = obj;
}

- (GCSurnamePrefixAttribute *)surnamePrefix
{
	return _surnamePrefix;
}


- (void)setSurname:(GCSurnameAttribute *)obj
{
	if (_surname) {
		[_surname setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_surname = obj;
}

- (GCSurnameAttribute *)surname
{
	return _surname;
}


- (void)setNameSuffix:(GCNameSuffixAttribute *)obj
{
	if (_nameSuffix) {
		[_nameSuffix setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_nameSuffix = obj;
}

- (GCNameSuffixAttribute *)nameSuffix
{
	return _nameSuffix;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCPhoneNumberAttribute {

}

// Methods:
/** Initializes and returns a phoneNumber.

 
 @return A new phoneNumber.
*/
+(GCPhoneNumberAttribute *)phoneNumber
{
	return [[self alloc] init];
}
/** Initializes and returns a phoneNumber.

 @param value The value as a GCValue object.
 @return A new phoneNumber.
*/
+(GCPhoneNumberAttribute *)phoneNumberWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a phoneNumber.

 @param value The value as an NSString.
 @return A new phoneNumber.
*/
+(GCPhoneNumberAttribute *)phoneNumberWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"phoneNumber"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCPhysicalDescriptionAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a physicalDescription.

 
 @return A new physicalDescription.
*/
+(GCPhysicalDescriptionAttribute *)physicalDescription
{
	return [[self alloc] init];
}
/** Initializes and returns a physicalDescription.

 @param value The value as a GCValue object.
 @return A new physicalDescription.
*/
+(GCPhysicalDescriptionAttribute *)physicalDescriptionWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a physicalDescription.

 @param value The value as an NSString.
 @return A new physicalDescription.
*/
+(GCPhysicalDescriptionAttribute *)physicalDescriptionWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"physicalDescription"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCPlaceAttribute {
	GCPlaceFormatAttribute *_placeFormat;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a place.

 
 @return A new place.
*/
+(GCPlaceAttribute *)place
{
	return [[self alloc] init];
}
/** Initializes and returns a place.

 @param value The value as a GCValue object.
 @return A new place.
*/
+(GCPlaceAttribute *)placeWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a place.

 @param value The value as an NSString.
 @return A new place.
*/
+(GCPlaceAttribute *)placeWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"place"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setPlaceFormat:(GCPlaceFormatAttribute *)obj
{
	if (_placeFormat) {
		[_placeFormat setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_placeFormat = obj;
}

- (GCPlaceFormatAttribute *)placeFormat
{
	return _placeFormat;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCPlaceFormatAttribute {

}

// Methods:
/** Initializes and returns a placeFormat.

 
 @return A new placeFormat.
*/
+(GCPlaceFormatAttribute *)placeFormat
{
	return [[self alloc] init];
}
/** Initializes and returns a placeFormat.

 @param value The value as a GCValue object.
 @return A new placeFormat.
*/
+(GCPlaceFormatAttribute *)placeFormatWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a placeFormat.

 @param value The value as an NSString.
 @return A new placeFormat.
*/
+(GCPlaceFormatAttribute *)placeFormatWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"placeFormat"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCPlaceFormatSpecifierAttribute {
	GCPlaceFormatAttribute *_placeFormat;
}

// Methods:
/** Initializes and returns a placeFormatSpecifier.

 
 @return A new placeFormatSpecifier.
*/
+(GCPlaceFormatSpecifierAttribute *)placeFormatSpecifier
{
	return [[self alloc] init];
}
/** Initializes and returns a placeFormatSpecifier.

 @param value The value as a GCValue object.
 @return A new placeFormatSpecifier.
*/
+(GCPlaceFormatSpecifierAttribute *)placeFormatSpecifierWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a placeFormatSpecifier.

 @param value The value as an NSString.
 @return A new placeFormatSpecifier.
*/
+(GCPlaceFormatSpecifierAttribute *)placeFormatSpecifierWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"placeFormatSpecifier"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setPlaceFormat:(GCPlaceFormatAttribute *)obj
{
	if (_placeFormat) {
		[_placeFormat setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_placeFormat = obj;
}

- (GCPlaceFormatAttribute *)placeFormat
{
	return _placeFormat;
}


@end

@implementation GCPostalCodeAttribute {

}

// Methods:
/** Initializes and returns a postalCode.

 
 @return A new postalCode.
*/
+(GCPostalCodeAttribute *)postalCode
{
	return [[self alloc] init];
}
/** Initializes and returns a postalCode.

 @param value The value as a GCValue object.
 @return A new postalCode.
*/
+(GCPostalCodeAttribute *)postalCodeWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a postalCode.

 @param value The value as an NSString.
 @return A new postalCode.
*/
+(GCPostalCodeAttribute *)postalCodeWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"postalCode"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCProbateAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a probate.

 
 @return A new probate.
*/
+(GCProbateAttribute *)probate
{
	return [[self alloc] init];
}
/** Initializes and returns a probate.

 @param value The value as a GCValue object.
 @return A new probate.
*/
+(GCProbateAttribute *)probateWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a probate.

 @param value The value as an NSString.
 @return A new probate.
*/
+(GCProbateAttribute *)probateWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"probate"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCPropertyOwnedAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a propertyOwned.

 
 @return A new propertyOwned.
*/
+(GCPropertyOwnedAttribute *)propertyOwned
{
	return [[self alloc] init];
}
/** Initializes and returns a propertyOwned.

 @param value The value as a GCValue object.
 @return A new propertyOwned.
*/
+(GCPropertyOwnedAttribute *)propertyOwnedWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a propertyOwned.

 @param value The value as an NSString.
 @return A new propertyOwned.
*/
+(GCPropertyOwnedAttribute *)propertyOwnedWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"propertyOwned"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCPublicationFactsAttribute {

}

// Methods:
/** Initializes and returns a publicationFacts.

 
 @return A new publicationFacts.
*/
+(GCPublicationFactsAttribute *)publicationFacts
{
	return [[self alloc] init];
}
/** Initializes and returns a publicationFacts.

 @param value The value as a GCValue object.
 @return A new publicationFacts.
*/
+(GCPublicationFactsAttribute *)publicationFactsWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a publicationFacts.

 @param value The value as an NSString.
 @return A new publicationFacts.
*/
+(GCPublicationFactsAttribute *)publicationFactsWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"publicationFacts"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCQualityOfDataAttribute {

}

// Methods:
/** Initializes and returns a qualityOfData.

 
 @return A new qualityOfData.
*/
+(GCQualityOfDataAttribute *)qualityOfData
{
	return [[self alloc] init];
}
/** Initializes and returns a qualityOfData.

 @param value The value as a GCValue object.
 @return A new qualityOfData.
*/
+(GCQualityOfDataAttribute *)qualityOfDataWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a qualityOfData.

 @param value The value as an NSString.
 @return A new qualityOfData.
*/
+(GCQualityOfDataAttribute *)qualityOfDataWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"qualityOfData"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCRecordFileNumberAttribute {

}

// Methods:
/** Initializes and returns a recordFileNumber.

 
 @return A new recordFileNumber.
*/
+(GCRecordFileNumberAttribute *)recordFileNumber
{
	return [[self alloc] init];
}
/** Initializes and returns a recordFileNumber.

 @param value The value as a GCValue object.
 @return A new recordFileNumber.
*/
+(GCRecordFileNumberAttribute *)recordFileNumberWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a recordFileNumber.

 @param value The value as an NSString.
 @return A new recordFileNumber.
*/
+(GCRecordFileNumberAttribute *)recordFileNumberWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"recordFileNumber"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCRecordIdNumberAttribute {

}

// Methods:
/** Initializes and returns a recordIdNumber.

 
 @return A new recordIdNumber.
*/
+(GCRecordIdNumberAttribute *)recordIdNumber
{
	return [[self alloc] init];
}
/** Initializes and returns a recordIdNumber.

 @param value The value as a GCValue object.
 @return A new recordIdNumber.
*/
+(GCRecordIdNumberAttribute *)recordIdNumberWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a recordIdNumber.

 @param value The value as an NSString.
 @return A new recordIdNumber.
*/
+(GCRecordIdNumberAttribute *)recordIdNumberWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"recordIdNumber"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCRecordTypeAttribute {

}

// Methods:
/** Initializes and returns a recordType.

 
 @return A new recordType.
*/
+(GCRecordTypeAttribute *)recordType
{
	return [[self alloc] init];
}
/** Initializes and returns a recordType.

 @param value The value as a GCValue object.
 @return A new recordType.
*/
+(GCRecordTypeAttribute *)recordTypeWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a recordType.

 @param value The value as an NSString.
 @return A new recordType.
*/
+(GCRecordTypeAttribute *)recordTypeWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"recordType"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCRelationshipDescriptorAttribute {

}

// Methods:
/** Initializes and returns a relationshipDescriptor.

 
 @return A new relationshipDescriptor.
*/
+(GCRelationshipDescriptorAttribute *)relationshipDescriptor
{
	return [[self alloc] init];
}
/** Initializes and returns a relationshipDescriptor.

 @param value The value as a GCValue object.
 @return A new relationshipDescriptor.
*/
+(GCRelationshipDescriptorAttribute *)relationshipDescriptorWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a relationshipDescriptor.

 @param value The value as an NSString.
 @return A new relationshipDescriptor.
*/
+(GCRelationshipDescriptorAttribute *)relationshipDescriptorWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"relationshipDescriptor"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCReligionAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a religion.

 
 @return A new religion.
*/
+(GCReligionAttribute *)religion
{
	return [[self alloc] init];
}
/** Initializes and returns a religion.

 @param value The value as a GCValue object.
 @return A new religion.
*/
+(GCReligionAttribute *)religionWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a religion.

 @param value The value as an NSString.
 @return A new religion.
*/
+(GCReligionAttribute *)religionWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"religion"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCRepositoryEntity {
	GCDescriptiveNameAttribute *_descriptiveName;
	GCAddressAttribute *_address;
	NSMutableArray *_phoneNumbers;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	NSMutableArray *_userReferenceNumbers;
	GCRecordIdNumberAttribute *_recordIdNumber;
	GCChangeInfoAttribute *_changeInfo;
}

// Methods:
/** Initializes and returns a repository.

 @param context The context in which to create the entity.
 @return A new repository.
*/
+(GCRepositoryEntity *)repositoryInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"repository" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_phoneNumbers = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
		_userReferenceNumbers = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setDescriptiveName:(GCDescriptiveNameAttribute *)obj
{
	if (_descriptiveName) {
		[_descriptiveName setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_descriptiveName = obj;
}

- (GCDescriptiveNameAttribute *)descriptiveName
{
	return _descriptiveName;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (NSMutableArray *)mutablePhoneNumbers {
    return [self mutableArrayValueForKey:@"phoneNumbers"];
}

- (NSUInteger)countOfPhoneNumbers {
	return [_phoneNumbers count];
}

- (id)objectInPhoneNumbersAtIndex:(NSUInteger)index {
    return [_phoneNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCPhoneNumberAttribute *)obj inPhoneNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCPhoneNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_phoneNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromPhoneNumbersAtIndex:(NSUInteger)index {
	((GCPhoneNumberAttribute *)_phoneNumbers[index]).describedObject = nil;
    [_phoneNumbers removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableUserReferenceNumbers {
    return [self mutableArrayValueForKey:@"userReferenceNumbers"];
}

- (NSUInteger)countOfUserReferenceNumbers {
	return [_userReferenceNumbers count];
}

- (id)objectInUserReferenceNumbersAtIndex:(NSUInteger)index {
    return [_userReferenceNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCUserReferenceNumberAttribute *)obj inUserReferenceNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCUserReferenceNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_userReferenceNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromUserReferenceNumbersAtIndex:(NSUInteger)index {
	((GCUserReferenceNumberAttribute *)_userReferenceNumbers[index]).describedObject = nil;
    [_userReferenceNumbers removeObjectAtIndex:index];
}
	

- (void)setRecordIdNumber:(GCRecordIdNumberAttribute *)obj
{
	if (_recordIdNumber) {
		[_recordIdNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_recordIdNumber = obj;
}

- (GCRecordIdNumberAttribute *)recordIdNumber
{
	return _recordIdNumber;
}


- (void)setChangeInfo:(GCChangeInfoAttribute *)obj
{
	if (_changeInfo) {
		[_changeInfo setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_changeInfo = obj;
}

- (GCChangeInfoAttribute *)changeInfo
{
	return _changeInfo;
}


@end

@implementation GCRepositoryCitationRelationship {
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	NSMutableArray *_callNumbers;
}

// Methods:
/** Initializes and returns a repositoryCitation.

 
 @return A new repositoryCitation.
*/
+(GCRepositoryCitationRelationship *)repositoryCitation
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"repositoryCitation"];
	
	if (self) {
		// initialize ivars, if any:
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
		_callNumbers = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableCallNumbers {
    return [self mutableArrayValueForKey:@"callNumbers"];
}

- (NSUInteger)countOfCallNumbers {
	return [_callNumbers count];
}

- (id)objectInCallNumbersAtIndex:(NSUInteger)index {
    return [_callNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCCallNumberAttribute *)obj inCallNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCCallNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_callNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromCallNumbersAtIndex:(NSUInteger)index {
	((GCCallNumberAttribute *)_callNumbers[index]).describedObject = nil;
    [_callNumbers removeObjectAtIndex:index];
}
	

@end

@implementation GCResidenceAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a residence.

 
 @return A new residence.
*/
+(GCResidenceAttribute *)residence
{
	return [[self alloc] init];
}
/** Initializes and returns a residence.

 @param value The value as a GCValue object.
 @return A new residence.
*/
+(GCResidenceAttribute *)residenceWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a residence.

 @param value The value as an NSString.
 @return A new residence.
*/
+(GCResidenceAttribute *)residenceWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"residence"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCResponsibleAgencyAttribute {

}

// Methods:
/** Initializes and returns a responsibleAgency.

 
 @return A new responsibleAgency.
*/
+(GCResponsibleAgencyAttribute *)responsibleAgency
{
	return [[self alloc] init];
}
/** Initializes and returns a responsibleAgency.

 @param value The value as a GCValue object.
 @return A new responsibleAgency.
*/
+(GCResponsibleAgencyAttribute *)responsibleAgencyWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a responsibleAgency.

 @param value The value as an NSString.
 @return A new responsibleAgency.
*/
+(GCResponsibleAgencyAttribute *)responsibleAgencyWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"responsibleAgency"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCRestrictionNoticeAttribute {

}

// Methods:
/** Initializes and returns a restrictionNotice.

 
 @return A new restrictionNotice.
*/
+(GCRestrictionNoticeAttribute *)restrictionNotice
{
	return [[self alloc] init];
}
/** Initializes and returns a restrictionNotice.

 @param value The value as a GCValue object.
 @return A new restrictionNotice.
*/
+(GCRestrictionNoticeAttribute *)restrictionNoticeWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a restrictionNotice.

 @param value The value as an NSString.
 @return A new restrictionNotice.
*/
+(GCRestrictionNoticeAttribute *)restrictionNoticeWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"restrictionNotice"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCRetirementAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a retirement.

 
 @return A new retirement.
*/
+(GCRetirementAttribute *)retirement
{
	return [[self alloc] init];
}
/** Initializes and returns a retirement.

 @param value The value as a GCValue object.
 @return A new retirement.
*/
+(GCRetirementAttribute *)retirementWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a retirement.

 @param value The value as an NSString.
 @return A new retirement.
*/
+(GCRetirementAttribute *)retirementWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"retirement"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCRoleAttribute {

}

// Methods:
/** Initializes and returns a role.

 
 @return A new role.
*/
+(GCRoleAttribute *)role
{
	return [[self alloc] init];
}
/** Initializes and returns a role.

 @param value The value as a GCValue object.
 @return A new role.
*/
+(GCRoleAttribute *)roleWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a role.

 @param value The value as an NSString.
 @return A new role.
*/
+(GCRoleAttribute *)roleWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"role"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCSealedToFamilyRelationship {

}

// Methods:
/** Initializes and returns a sealedToFamily.

 
 @return A new sealedToFamily.
*/
+(GCSealedToFamilyRelationship *)sealedToFamily
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"sealedToFamily"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCSexAttribute {

}

// Methods:
/** Initializes and returns a sex.

 
 @return A new sex.
*/
+(GCSexAttribute *)sex
{
	return [[self alloc] init];
}
/** Initializes and returns a sex.

 @param value The value as a GCValue object.
 @return A new sex.
*/
+(GCSexAttribute *)sexWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a sex.

 @param value The value as an NSString.
 @return A new sex.
*/
+(GCSexAttribute *)sexWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"sex"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCSocialSecurityNumberAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a socialSecurityNumber.

 
 @return A new socialSecurityNumber.
*/
+(GCSocialSecurityNumberAttribute *)socialSecurityNumber
{
	return [[self alloc] init];
}
/** Initializes and returns a socialSecurityNumber.

 @param value The value as a GCValue object.
 @return A new socialSecurityNumber.
*/
+(GCSocialSecurityNumberAttribute *)socialSecurityNumberWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a socialSecurityNumber.

 @param value The value as an NSString.
 @return A new socialSecurityNumber.
*/
+(GCSocialSecurityNumberAttribute *)socialSecurityNumberWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"socialSecurityNumber"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCSourceEntity {
	GCSourceDataAttribute *_sourceData;
	GCAuthorAttribute *_author;
	GCTitleAttribute *_title;
	GCAbbreviationAttribute *_abbreviation;
	GCPublicationFactsAttribute *_publicationFacts;
	GCTextAttribute *_text;
	GCRepositoryCitationRelationship *_repositoryCitation;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
	GCUserReferenceNumberAttribute *_userReferenceNumber;
	GCRecordIdNumberAttribute *_recordIdNumber;
	GCChangeInfoAttribute *_changeInfo;
}

// Methods:
/** Initializes and returns a source.

 @param context The context in which to create the entity.
 @return A new source.
*/
+(GCSourceEntity *)sourceInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"source" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setSourceData:(GCSourceDataAttribute *)obj
{
	if (_sourceData) {
		[_sourceData setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_sourceData = obj;
}

- (GCSourceDataAttribute *)sourceData
{
	return _sourceData;
}


- (void)setAuthor:(GCAuthorAttribute *)obj
{
	if (_author) {
		[_author setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_author = obj;
}

- (GCAuthorAttribute *)author
{
	return _author;
}


- (void)setTitle:(GCTitleAttribute *)obj
{
	if (_title) {
		[_title setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_title = obj;
}

- (GCTitleAttribute *)title
{
	return _title;
}


- (void)setAbbreviation:(GCAbbreviationAttribute *)obj
{
	if (_abbreviation) {
		[_abbreviation setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_abbreviation = obj;
}

- (GCAbbreviationAttribute *)abbreviation
{
	return _abbreviation;
}


- (void)setPublicationFacts:(GCPublicationFactsAttribute *)obj
{
	if (_publicationFacts) {
		[_publicationFacts setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_publicationFacts = obj;
}

- (GCPublicationFactsAttribute *)publicationFacts
{
	return _publicationFacts;
}


- (void)setText:(GCTextAttribute *)obj
{
	if (_text) {
		[_text setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_text = obj;
}

- (GCTextAttribute *)text
{
	return _text;
}


- (void)setRepositoryCitation:(GCRepositoryCitationRelationship *)obj
{
	if (_repositoryCitation) {
		[_repositoryCitation setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_repositoryCitation = obj;
}

- (GCRepositoryCitationRelationship *)repositoryCitation
{
	return _repositoryCitation;
}



- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

- (void)setUserReferenceNumber:(GCUserReferenceNumberAttribute *)obj
{
	if (_userReferenceNumber) {
		[_userReferenceNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_userReferenceNumber = obj;
}

- (GCUserReferenceNumberAttribute *)userReferenceNumber
{
	return _userReferenceNumber;
}


- (void)setRecordIdNumber:(GCRecordIdNumberAttribute *)obj
{
	if (_recordIdNumber) {
		[_recordIdNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_recordIdNumber = obj;
}

- (GCRecordIdNumberAttribute *)recordIdNumber
{
	return _recordIdNumber;
}


- (void)setChangeInfo:(GCChangeInfoAttribute *)obj
{
	if (_changeInfo) {
		[_changeInfo setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_changeInfo = obj;
}

- (GCChangeInfoAttribute *)changeInfo
{
	return _changeInfo;
}


@end

@implementation GCSourceCitationRelationship {
	GCPageAttribute *_page;
	GCDataAttribute *_data;
	GCEventCitedAttribute *_eventCited;
	GCQualityOfDataAttribute *_qualityOfData;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a sourceCitation.

 
 @return A new sourceCitation.
*/
+(GCSourceCitationRelationship *)sourceCitation
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"sourceCitation"];
	
	if (self) {
		// initialize ivars, if any:
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setPage:(GCPageAttribute *)obj
{
	if (_page) {
		[_page setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_page = obj;
}

- (GCPageAttribute *)page
{
	return _page;
}


- (void)setData:(GCDataAttribute *)obj
{
	if (_data) {
		[_data setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_data = obj;
}

- (GCDataAttribute *)data
{
	return _data;
}


- (void)setEventCited:(GCEventCitedAttribute *)obj
{
	if (_eventCited) {
		[_eventCited setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_eventCited = obj;
}

- (GCEventCitedAttribute *)eventCited
{
	return _eventCited;
}


- (void)setQualityOfData:(GCQualityOfDataAttribute *)obj
{
	if (_qualityOfData) {
		[_qualityOfData setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_qualityOfData = obj;
}

- (GCQualityOfDataAttribute *)qualityOfData
{
	return _qualityOfData;
}



- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCSourceDataAttribute {
	NSMutableArray *_eventsRecordeds;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a sourceData.

 
 @return A new sourceData.
*/
+(GCSourceDataAttribute *)sourceData
{
	return [[self alloc] init];
}
/** Initializes and returns a sourceData.

 @param value The value as a GCValue object.
 @return A new sourceData.
*/
+(GCSourceDataAttribute *)sourceDataWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a sourceData.

 @param value The value as an NSString.
 @return A new sourceData.
*/
+(GCSourceDataAttribute *)sourceDataWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"sourceData"];
	
	if (self) {
		// initialize ivars, if any:
		_eventsRecordeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (NSMutableArray *)mutableEventsRecordeds {
    return [self mutableArrayValueForKey:@"eventsRecordeds"];
}

- (NSUInteger)countOfEventsRecordeds {
	return [_eventsRecordeds count];
}

- (id)objectInEventsRecordedsAtIndex:(NSUInteger)index {
    return [_eventsRecordeds objectAtIndex:index];
}
 
- (void)insertObject:(GCEventsRecordedAttribute *)obj inEventsRecordedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCEventsRecordedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_eventsRecordeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromEventsRecordedsAtIndex:(NSUInteger)index {
	((GCEventsRecordedAttribute *)_eventsRecordeds[index]).describedObject = nil;
    [_eventsRecordeds removeObjectAtIndex:index];
}
	

- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}



- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCSourceEmbeddedAttribute {
	NSMutableArray *_texts;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a sourceEmbedded.

 
 @return A new sourceEmbedded.
*/
+(GCSourceEmbeddedAttribute *)sourceEmbedded
{
	return [[self alloc] init];
}
/** Initializes and returns a sourceEmbedded.

 @param value The value as a GCValue object.
 @return A new sourceEmbedded.
*/
+(GCSourceEmbeddedAttribute *)sourceEmbeddedWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a sourceEmbedded.

 @param value The value as an NSString.
 @return A new sourceEmbedded.
*/
+(GCSourceEmbeddedAttribute *)sourceEmbeddedWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"sourceEmbedded"];
	
	if (self) {
		// initialize ivars, if any:
		_texts = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (NSMutableArray *)mutableTexts {
    return [self mutableArrayValueForKey:@"texts"];
}

- (NSUInteger)countOfTexts {
	return [_texts count];
}

- (id)objectInTextsAtIndex:(NSUInteger)index {
    return [_texts objectAtIndex:index];
}
 
- (void)insertObject:(GCTextAttribute *)obj inTextsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCTextAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_texts insertObject:obj atIndex:index];
}

- (void)removeObjectFromTextsAtIndex:(NSUInteger)index {
	((GCTextAttribute *)_texts[index]).describedObject = nil;
    [_texts removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCSpouseInFamilyRelationship {
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a spouseInFamily.

 
 @return A new spouseInFamily.
*/
+(GCSpouseInFamilyRelationship *)spouseInFamily
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"spouseInFamily"];
	
	if (self) {
		// initialize ivars, if any:
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCStateAttribute {

}

// Methods:
/** Initializes and returns a state.

 
 @return A new state.
*/
+(GCStateAttribute *)state
{
	return [[self alloc] init];
}
/** Initializes and returns a state.

 @param value The value as a GCValue object.
 @return A new state.
*/
+(GCStateAttribute *)stateWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a state.

 @param value The value as an NSString.
 @return A new state.
*/
+(GCStateAttribute *)stateWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"state"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCSubmissionEntity {
	GCSubmitterReferenceRelationship *_submitterReference;
	GCFamilyFileAttribute *_familyFile;
	GCTempleAttribute *_temple;
	GCGenerationsOfAncestorsAttribute *_generationsOfAncestors;
	GCGenerationsOfDescendantsAttribute *_generationsOfDescendants;
	GCOrdinanceFlagAttribute *_ordinanceFlag;
	NSMutableArray *_userReferenceNumbers;
	GCRecordIdNumberAttribute *_recordIdNumber;
	GCChangeInfoAttribute *_changeInfo;
}

// Methods:
/** Initializes and returns a submission.

 @param context The context in which to create the entity.
 @return A new submission.
*/
+(GCSubmissionEntity *)submissionInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"submission" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_userReferenceNumbers = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setSubmitterReference:(GCSubmitterReferenceRelationship *)obj
{
	if (_submitterReference) {
		[_submitterReference setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_submitterReference = obj;
}

- (GCSubmitterReferenceRelationship *)submitterReference
{
	return _submitterReference;
}


- (void)setFamilyFile:(GCFamilyFileAttribute *)obj
{
	if (_familyFile) {
		[_familyFile setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_familyFile = obj;
}

- (GCFamilyFileAttribute *)familyFile
{
	return _familyFile;
}


- (void)setTemple:(GCTempleAttribute *)obj
{
	if (_temple) {
		[_temple setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_temple = obj;
}

- (GCTempleAttribute *)temple
{
	return _temple;
}


- (void)setGenerationsOfAncestors:(GCGenerationsOfAncestorsAttribute *)obj
{
	if (_generationsOfAncestors) {
		[_generationsOfAncestors setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_generationsOfAncestors = obj;
}

- (GCGenerationsOfAncestorsAttribute *)generationsOfAncestors
{
	return _generationsOfAncestors;
}


- (void)setGenerationsOfDescendants:(GCGenerationsOfDescendantsAttribute *)obj
{
	if (_generationsOfDescendants) {
		[_generationsOfDescendants setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_generationsOfDescendants = obj;
}

- (GCGenerationsOfDescendantsAttribute *)generationsOfDescendants
{
	return _generationsOfDescendants;
}


- (void)setOrdinanceFlag:(GCOrdinanceFlagAttribute *)obj
{
	if (_ordinanceFlag) {
		[_ordinanceFlag setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_ordinanceFlag = obj;
}

- (GCOrdinanceFlagAttribute *)ordinanceFlag
{
	return _ordinanceFlag;
}


- (NSMutableArray *)mutableUserReferenceNumbers {
    return [self mutableArrayValueForKey:@"userReferenceNumbers"];
}

- (NSUInteger)countOfUserReferenceNumbers {
	return [_userReferenceNumbers count];
}

- (id)objectInUserReferenceNumbersAtIndex:(NSUInteger)index {
    return [_userReferenceNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCUserReferenceNumberAttribute *)obj inUserReferenceNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCUserReferenceNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_userReferenceNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromUserReferenceNumbersAtIndex:(NSUInteger)index {
	((GCUserReferenceNumberAttribute *)_userReferenceNumbers[index]).describedObject = nil;
    [_userReferenceNumbers removeObjectAtIndex:index];
}
	

- (void)setRecordIdNumber:(GCRecordIdNumberAttribute *)obj
{
	if (_recordIdNumber) {
		[_recordIdNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_recordIdNumber = obj;
}

- (GCRecordIdNumberAttribute *)recordIdNumber
{
	return _recordIdNumber;
}


- (void)setChangeInfo:(GCChangeInfoAttribute *)obj
{
	if (_changeInfo) {
		[_changeInfo setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_changeInfo = obj;
}

- (GCChangeInfoAttribute *)changeInfo
{
	return _changeInfo;
}


@end

@implementation GCSubmissionReferenceRelationship {

}

// Methods:
/** Initializes and returns a submissionReference.

 
 @return A new submissionReference.
*/
+(GCSubmissionReferenceRelationship *)submissionReference
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"submissionReference"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCSubmitterEntity {
	GCDescriptiveNameAttribute *_descriptiveName;
	GCAddressAttribute *_address;
	NSMutableArray *_phoneNumbers;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_languages;
	GCRecordFileNumberAttribute *_recordFileNumber;
	GCAncestralFileNumberAttribute *_ancestralFileNumber;
	NSMutableArray *_userReferenceNumbers;
	GCRecordIdNumberAttribute *_recordIdNumber;
	GCChangeInfoAttribute *_changeInfo;
}

// Methods:
/** Initializes and returns a submitter.

 @param context The context in which to create the entity.
 @return A new submitter.
*/
+(GCSubmitterEntity *)submitterInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"submitter" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_phoneNumbers = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_languages = [NSMutableArray array];
		_userReferenceNumbers = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setDescriptiveName:(GCDescriptiveNameAttribute *)obj
{
	if (_descriptiveName) {
		[_descriptiveName setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_descriptiveName = obj;
}

- (GCDescriptiveNameAttribute *)descriptiveName
{
	return _descriptiveName;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (NSMutableArray *)mutablePhoneNumbers {
    return [self mutableArrayValueForKey:@"phoneNumbers"];
}

- (NSUInteger)countOfPhoneNumbers {
	return [_phoneNumbers count];
}

- (id)objectInPhoneNumbersAtIndex:(NSUInteger)index {
    return [_phoneNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCPhoneNumberAttribute *)obj inPhoneNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCPhoneNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_phoneNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromPhoneNumbersAtIndex:(NSUInteger)index {
	((GCPhoneNumberAttribute *)_phoneNumbers[index]).describedObject = nil;
    [_phoneNumbers removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableLanguages {
    return [self mutableArrayValueForKey:@"languages"];
}

- (NSUInteger)countOfLanguages {
	return [_languages count];
}

- (id)objectInLanguagesAtIndex:(NSUInteger)index {
    return [_languages objectAtIndex:index];
}
 
- (void)insertObject:(GCLanguageAttribute *)obj inLanguagesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCLanguageAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_languages insertObject:obj atIndex:index];
}

- (void)removeObjectFromLanguagesAtIndex:(NSUInteger)index {
	((GCLanguageAttribute *)_languages[index]).describedObject = nil;
    [_languages removeObjectAtIndex:index];
}
	

- (void)setRecordFileNumber:(GCRecordFileNumberAttribute *)obj
{
	if (_recordFileNumber) {
		[_recordFileNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_recordFileNumber = obj;
}

- (GCRecordFileNumberAttribute *)recordFileNumber
{
	return _recordFileNumber;
}


- (void)setAncestralFileNumber:(GCAncestralFileNumberAttribute *)obj
{
	if (_ancestralFileNumber) {
		[_ancestralFileNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_ancestralFileNumber = obj;
}

- (GCAncestralFileNumberAttribute *)ancestralFileNumber
{
	return _ancestralFileNumber;
}


- (NSMutableArray *)mutableUserReferenceNumbers {
    return [self mutableArrayValueForKey:@"userReferenceNumbers"];
}

- (NSUInteger)countOfUserReferenceNumbers {
	return [_userReferenceNumbers count];
}

- (id)objectInUserReferenceNumbersAtIndex:(NSUInteger)index {
    return [_userReferenceNumbers objectAtIndex:index];
}
 
- (void)insertObject:(GCUserReferenceNumberAttribute *)obj inUserReferenceNumbersAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCUserReferenceNumberAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_userReferenceNumbers insertObject:obj atIndex:index];
}

- (void)removeObjectFromUserReferenceNumbersAtIndex:(NSUInteger)index {
	((GCUserReferenceNumberAttribute *)_userReferenceNumbers[index]).describedObject = nil;
    [_userReferenceNumbers removeObjectAtIndex:index];
}
	

- (void)setRecordIdNumber:(GCRecordIdNumberAttribute *)obj
{
	if (_recordIdNumber) {
		[_recordIdNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_recordIdNumber = obj;
}

- (GCRecordIdNumberAttribute *)recordIdNumber
{
	return _recordIdNumber;
}


- (void)setChangeInfo:(GCChangeInfoAttribute *)obj
{
	if (_changeInfo) {
		[_changeInfo setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_changeInfo = obj;
}

- (GCChangeInfoAttribute *)changeInfo
{
	return _changeInfo;
}


@end

@implementation GCSubmitterReferenceRelationship {

}

// Methods:
/** Initializes and returns a submitterReference.

 
 @return A new submitterReference.
*/
+(GCSubmitterReferenceRelationship *)submitterReference
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"submitterReference"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCSurnameAttribute {

}

// Methods:
/** Initializes and returns a surname.

 
 @return A new surname.
*/
+(GCSurnameAttribute *)surname
{
	return [[self alloc] init];
}
/** Initializes and returns a surname.

 @param value The value as a GCValue object.
 @return A new surname.
*/
+(GCSurnameAttribute *)surnameWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a surname.

 @param value The value as an NSString.
 @return A new surname.
*/
+(GCSurnameAttribute *)surnameWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"surname"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCSurnamePrefixAttribute {

}

// Methods:
/** Initializes and returns a surnamePrefix.

 
 @return A new surnamePrefix.
*/
+(GCSurnamePrefixAttribute *)surnamePrefix
{
	return [[self alloc] init];
}
/** Initializes and returns a surnamePrefix.

 @param value The value as a GCValue object.
 @return A new surnamePrefix.
*/
+(GCSurnamePrefixAttribute *)surnamePrefixWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a surnamePrefix.

 @param value The value as an NSString.
 @return A new surnamePrefix.
*/
+(GCSurnamePrefixAttribute *)surnamePrefixWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"surnamePrefix"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCTempleAttribute {

}

// Methods:
/** Initializes and returns a temple.

 
 @return A new temple.
*/
+(GCTempleAttribute *)temple
{
	return [[self alloc] init];
}
/** Initializes and returns a temple.

 @param value The value as a GCValue object.
 @return A new temple.
*/
+(GCTempleAttribute *)templeWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a temple.

 @param value The value as an NSString.
 @return A new temple.
*/
+(GCTempleAttribute *)templeWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"temple"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCTextAttribute {

}

// Methods:
/** Initializes and returns a text.

 
 @return A new text.
*/
+(GCTextAttribute *)text
{
	return [[self alloc] init];
}
/** Initializes and returns a text.

 @param value The value as a GCValue object.
 @return A new text.
*/
+(GCTextAttribute *)textWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a text.

 @param value The value as an NSString.
 @return A new text.
*/
+(GCTextAttribute *)textWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"text"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCTimeAttribute {

}

// Methods:
/** Initializes and returns a time.

 
 @return A new time.
*/
+(GCTimeAttribute *)time
{
	return [[self alloc] init];
}
/** Initializes and returns a time.

 @param value The value as a GCValue object.
 @return A new time.
*/
+(GCTimeAttribute *)timeWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a time.

 @param value The value as an NSString.
 @return A new time.
*/
+(GCTimeAttribute *)timeWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"time"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCTitleAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a title.

 
 @return A new title.
*/
+(GCTitleAttribute *)title
{
	return [[self alloc] init];
}
/** Initializes and returns a title.

 @param value The value as a GCValue object.
 @return A new title.
*/
+(GCTitleAttribute *)titleWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a title.

 @param value The value as an NSString.
 @return A new title.
*/
+(GCTitleAttribute *)titleWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"title"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

@implementation GCTypeDescriptionAttribute {

}

// Methods:
/** Initializes and returns a typeDescription.

 
 @return A new typeDescription.
*/
+(GCTypeDescriptionAttribute *)typeDescription
{
	return [[self alloc] init];
}
/** Initializes and returns a typeDescription.

 @param value The value as a GCValue object.
 @return A new typeDescription.
*/
+(GCTypeDescriptionAttribute *)typeDescriptionWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a typeDescription.

 @param value The value as an NSString.
 @return A new typeDescription.
*/
+(GCTypeDescriptionAttribute *)typeDescriptionWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"typeDescription"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCUserReferenceNumberAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
}

// Methods:
/** Initializes and returns a userReferenceNumber.

 
 @return A new userReferenceNumber.
*/
+(GCUserReferenceNumberAttribute *)userReferenceNumber
{
	return [[self alloc] init];
}
/** Initializes and returns a userReferenceNumber.

 @param value The value as a GCValue object.
 @return A new userReferenceNumber.
*/
+(GCUserReferenceNumberAttribute *)userReferenceNumberWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a userReferenceNumber.

 @param value The value as an NSString.
 @return A new userReferenceNumber.
*/
+(GCUserReferenceNumberAttribute *)userReferenceNumberWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"userReferenceNumber"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


@end

@implementation GCVersionAttribute {

}

// Methods:
/** Initializes and returns a version.

 
 @return A new version.
*/
+(GCVersionAttribute *)version
{
	return [[self alloc] init];
}
/** Initializes and returns a version.

 @param value The value as a GCValue object.
 @return A new version.
*/
+(GCVersionAttribute *)versionWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a version.

 @param value The value as an NSString.
 @return A new version.
*/
+(GCVersionAttribute *)versionWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"version"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCWifeRelationship {

}

// Methods:
/** Initializes and returns a wife.

 
 @return A new wife.
*/
+(GCWifeRelationship *)wife
{
	return [[self alloc] init];
}
- (id)init
{
	self = [super _initWithType:@"wife"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:


@end

@implementation GCWifeDetailAttribute {
	GCAgeAttribute *_age;
}

// Methods:
/** Initializes and returns a wifeDetail.

 
 @return A new wifeDetail.
*/
+(GCWifeDetailAttribute *)wifeDetail
{
	return [[self alloc] init];
}
/** Initializes and returns a wifeDetail.

 @param value The value as a GCValue object.
 @return A new wifeDetail.
*/
+(GCWifeDetailAttribute *)wifeDetailWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a wifeDetail.

 @param value The value as an NSString.
 @return A new wifeDetail.
*/
+(GCWifeDetailAttribute *)wifeDetailWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"wifeDetail"];
	
	if (self) {
		// initialize ivars, if any:

	}
	
	return self;
}


// Properties:

- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


@end

@implementation GCWillAttribute {
	GCTypeDescriptionAttribute *_typeDescription;
	GCDateAttribute *_date;
	GCPlaceAttribute *_place;
	GCAddressAttribute *_address;
	GCPhoneNumberAttribute *_phoneNumber;
	GCAgeAttribute *_age;
	GCResponsibleAgencyAttribute *_responsibleAgency;
	GCCauseAttribute *_cause;
	NSMutableArray *_sourceCitations;
	NSMutableArray *_sourceEmbeddeds;
	NSMutableArray *_multimediaReferences;
	NSMutableArray *_multimediaEmbeddeds;
	NSMutableArray *_noteReferences;
	NSMutableArray *_noteEmbeddeds;
}

// Methods:
/** Initializes and returns a will.

 
 @return A new will.
*/
+(GCWillAttribute *)will
{
	return [[self alloc] init];
}
/** Initializes and returns a will.

 @param value The value as a GCValue object.
 @return A new will.
*/
+(GCWillAttribute *)willWithValue:(GCValue *)value
{
	return [[self alloc] initWithValue:value];
}
/** Initializes and returns a will.

 @param value The value as an NSString.
 @return A new will.
*/
+(GCWillAttribute *)willWithGedcomStringValue:(NSString *)value
{
	return [[self alloc] initWithGedcomStringValue:value];
}
- (id)init
{
	self = [super _initWithType:@"will"];
	
	if (self) {
		// initialize ivars, if any:
		_sourceCitations = [NSMutableArray array];
		_sourceEmbeddeds = [NSMutableArray array];
		_multimediaReferences = [NSMutableArray array];
		_multimediaEmbeddeds = [NSMutableArray array];
		_noteReferences = [NSMutableArray array];
		_noteEmbeddeds = [NSMutableArray array];
	}
	
	return self;
}


// Properties:


- (void)setTypeDescription:(GCTypeDescriptionAttribute *)obj
{
	if (_typeDescription) {
		[_typeDescription setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_typeDescription = obj;
}

- (GCTypeDescriptionAttribute *)typeDescription
{
	return _typeDescription;
}


- (void)setDate:(GCDateAttribute *)obj
{
	if (_date) {
		[_date setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_date = obj;
}

- (GCDateAttribute *)date
{
	return _date;
}


- (void)setPlace:(GCPlaceAttribute *)obj
{
	if (_place) {
		[_place setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_place = obj;
}

- (GCPlaceAttribute *)place
{
	return _place;
}


- (void)setAddress:(GCAddressAttribute *)obj
{
	if (_address) {
		[_address setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_address = obj;
}

- (GCAddressAttribute *)address
{
	return _address;
}


- (void)setPhoneNumber:(GCPhoneNumberAttribute *)obj
{
	if (_phoneNumber) {
		[_phoneNumber setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_phoneNumber = obj;
}

- (GCPhoneNumberAttribute *)phoneNumber
{
	return _phoneNumber;
}


- (void)setAge:(GCAgeAttribute *)obj
{
	if (_age) {
		[_age setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_age = obj;
}

- (GCAgeAttribute *)age
{
	return _age;
}


- (void)setResponsibleAgency:(GCResponsibleAgencyAttribute *)obj
{
	if (_responsibleAgency) {
		[_responsibleAgency setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_responsibleAgency = obj;
}

- (GCResponsibleAgencyAttribute *)responsibleAgency
{
	return _responsibleAgency;
}


- (void)setCause:(GCCauseAttribute *)obj
{
	if (_cause) {
		[_cause setValue:nil forKey:@"describedObject"];
	}
	
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_cause = obj;
}

- (GCCauseAttribute *)cause
{
	return _cause;
}



- (NSMutableArray *)mutableSourceCitations {
    return [self mutableArrayValueForKey:@"sourceCitations"];
}

- (NSUInteger)countOfSourceCitations {
	return [_sourceCitations count];
}

- (id)objectInSourceCitationsAtIndex:(NSUInteger)index {
    return [_sourceCitations objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceCitationRelationship *)obj inSourceCitationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceCitationRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceCitations insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceCitationsAtIndex:(NSUInteger)index {
	((GCSourceCitationRelationship *)_sourceCitations[index]).describedObject = nil;
    [_sourceCitations removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableSourceEmbeddeds {
    return [self mutableArrayValueForKey:@"sourceEmbeddeds"];
}

- (NSUInteger)countOfSourceEmbeddeds {
	return [_sourceEmbeddeds count];
}

- (id)objectInSourceEmbeddedsAtIndex:(NSUInteger)index {
    return [_sourceEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCSourceEmbeddedAttribute *)obj inSourceEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSourceEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_sourceEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromSourceEmbeddedsAtIndex:(NSUInteger)index {
	((GCSourceEmbeddedAttribute *)_sourceEmbeddeds[index]).describedObject = nil;
    [_sourceEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableMultimediaReferences {
    return [self mutableArrayValueForKey:@"multimediaReferences"];
}

- (NSUInteger)countOfMultimediaReferences {
	return [_multimediaReferences count];
}

- (id)objectInMultimediaReferencesAtIndex:(NSUInteger)index {
    return [_multimediaReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaReferenceRelationship *)obj inMultimediaReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaReferencesAtIndex:(NSUInteger)index {
	((GCMultimediaReferenceRelationship *)_multimediaReferences[index]).describedObject = nil;
    [_multimediaReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableMultimediaEmbeddeds {
    return [self mutableArrayValueForKey:@"multimediaEmbeddeds"];
}

- (NSUInteger)countOfMultimediaEmbeddeds {
	return [_multimediaEmbeddeds count];
}

- (id)objectInMultimediaEmbeddedsAtIndex:(NSUInteger)index {
    return [_multimediaEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCMultimediaEmbeddedAttribute *)obj inMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCMultimediaEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_multimediaEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromMultimediaEmbeddedsAtIndex:(NSUInteger)index {
	((GCMultimediaEmbeddedAttribute *)_multimediaEmbeddeds[index]).describedObject = nil;
    [_multimediaEmbeddeds removeObjectAtIndex:index];
}
	


- (NSMutableArray *)mutableNoteReferences {
    return [self mutableArrayValueForKey:@"noteReferences"];
}

- (NSUInteger)countOfNoteReferences {
	return [_noteReferences count];
}

- (id)objectInNoteReferencesAtIndex:(NSUInteger)index {
    return [_noteReferences objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteReferenceRelationship *)obj inNoteReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteReferenceRelationship class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteReferencesAtIndex:(NSUInteger)index {
	((GCNoteReferenceRelationship *)_noteReferences[index]).describedObject = nil;
    [_noteReferences removeObjectAtIndex:index];
}
	

- (NSMutableArray *)mutableNoteEmbeddeds {
    return [self mutableArrayValueForKey:@"noteEmbeddeds"];
}

- (NSUInteger)countOfNoteEmbeddeds {
	return [_noteEmbeddeds count];
}

- (id)objectInNoteEmbeddedsAtIndex:(NSUInteger)index {
    return [_noteEmbeddeds objectAtIndex:index];
}
 
- (void)insertObject:(GCNoteEmbeddedAttribute *)obj inNoteEmbeddedsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCNoteEmbeddedAttribute class]]);
	if (obj.describedObject) {
		[obj.describedObject.mutableProperties removeObject:obj];
	}
	obj.describedObject = self;
    [_noteEmbeddeds insertObject:obj atIndex:index];
}

- (void)removeObjectFromNoteEmbeddedsAtIndex:(NSUInteger)index {
	((GCNoteEmbeddedAttribute *)_noteEmbeddeds[index]).describedObject = nil;
    [_noteEmbeddeds removeObjectAtIndex:index];
}
	

@end

