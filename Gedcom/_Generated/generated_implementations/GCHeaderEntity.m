/*
 This file was autogenerated by tags.py 
 */

#import "GCHeaderEntity.h"

#import "GCObject_internal.h"
#import "GCContext_internal.h"

#import "GCCharacterSetAttribute.h"
#import "GCCopyrightAttribute.h"
#import "GCDestinationAttribute.h"
#import "GCFileAttribute.h"
#import "GCGedcomAttribute.h"
#import "GCHeaderDateAttribute.h"
#import "GCHeaderSourceAttribute.h"
#import "GCLanguageAttribute.h"
#import "GCNoteEmbeddedAttribute.h"
#import "GCPlaceFormatSpecifierAttribute.h"
#import "GCSubmissionReferenceRelationship.h"
#import "GCSubmitterReferenceRelationship.h"

@implementation GCHeaderEntity {
	GCHeaderSourceAttribute *_headerSource;
	NSMutableArray *_destinations;
	GCHeaderDateAttribute *_headerDate;
	GCSubmitterReferenceRelationship *_submitterReference;
	NSMutableArray *_submissionReferences;
	GCFileAttribute *_file;
	GCCopyrightAttribute *_copyright;
	GCGedcomAttribute *_gedcom;
	GCCharacterSetAttribute *_characterSet;
	GCLanguageAttribute *_language;
	GCPlaceFormatSpecifierAttribute *_placeFormatSpecifier;
	GCNoteEmbeddedAttribute *_noteEmbedded;
}

// Methods:
/** Initializes and returns a header.

 @param context The context in which to create the entity.
 @return A new header.
*/
+(GCHeaderEntity *)headerInContext:(GCContext *)context
{
	return [[self alloc] initInContext:context];
}
- (id)initInContext:(GCContext *)context
{
	self = [super _initWithType:@"header" inContext:context];
	
	if (self) {
		// initialize ivars, if any:
		_destinations = [NSMutableArray array];
		_submissionReferences = [NSMutableArray array];
	}
	
	return self;
}


// Properties:

- (void)setHeaderSource:(id)obj
{
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setHeaderSource:_headerSource];
	[self.context.undoManager setActionName:@"Undo headerSource"]; //TODO
	
	if (_headerSource) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_headerSource = (id)obj;
}

- (GCHeaderSourceAttribute *)headerSource
{
	return _headerSource;
}


- (NSMutableArray *)mutableDestinations {
    return [self mutableArrayValueForKey:@"destinations"];
}

- (NSUInteger)countOfDestinations {
	return [_destinations count];
}

- (id)objectInDestinationsAtIndex:(NSUInteger)index {
    return [_destinations objectAtIndex:index];
}
 
- (void)insertObject:(id)obj inDestinationsAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCDestinationAttribute class]]);
	
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromDestinationsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo destinations"]; //TODO
	
	if ([obj valueForKey:@"describedObject"] == self) {
		return;
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
    [_destinations insertObject:obj atIndex:index];
}

- (void)removeObjectFromDestinationsAtIndex:(NSUInteger)index {
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_destinations[index] inDestinationsAtIndex:index];
	[self.context.undoManager setActionName:@"Undo destinations"]; //TODO
	
	[((GCObject *)_destinations[index]) setValue:nil forKey:@"describedObject"];
	
    [_destinations removeObjectAtIndex:index];
}
	

- (void)setHeaderDate:(id)obj
{
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setHeaderDate:_headerDate];
	[self.context.undoManager setActionName:@"Undo headerDate"]; //TODO
	
	if (_headerDate) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_headerDate = (id)obj;
}

- (GCHeaderDateAttribute *)headerDate
{
	return _headerDate;
}


- (void)setSubmitterReference:(id)obj
{
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setSubmitterReference:_submitterReference];
	[self.context.undoManager setActionName:@"Undo submitterReference"]; //TODO
	
	if (_submitterReference) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_submitterReference = (id)obj;
}

- (GCSubmitterReferenceRelationship *)submitterReference
{
	return _submitterReference;
}


- (NSMutableArray *)mutableSubmissionReferences {
    return [self mutableArrayValueForKey:@"submissionReferences"];
}

- (NSUInteger)countOfSubmissionReferences {
	return [_submissionReferences count];
}

- (id)objectInSubmissionReferencesAtIndex:(NSUInteger)index {
    return [_submissionReferences objectAtIndex:index];
}
 
- (void)insertObject:(id)obj inSubmissionReferencesAtIndex:(NSUInteger)index {
	NSParameterAssert([obj isKindOfClass:[GCSubmissionReferenceRelationship class]]);
	
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] removeObjectFromSubmissionReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo submissionReferences"]; //TODO
	
	if ([obj valueForKey:@"describedObject"] == self) {
		return;
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
    [_submissionReferences insertObject:obj atIndex:index];
}

- (void)removeObjectFromSubmissionReferencesAtIndex:(NSUInteger)index {
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] insertObject:_submissionReferences[index] inSubmissionReferencesAtIndex:index];
	[self.context.undoManager setActionName:@"Undo submissionReferences"]; //TODO
	
	[((GCObject *)_submissionReferences[index]) setValue:nil forKey:@"describedObject"];
	
    [_submissionReferences removeObjectAtIndex:index];
}
	

- (void)setFile:(id)obj
{
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setFile:_file];
	[self.context.undoManager setActionName:@"Undo file"]; //TODO
	
	if (_file) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_file = (id)obj;
}

- (GCFileAttribute *)file
{
	return _file;
}


- (void)setCopyright:(id)obj
{
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setCopyright:_copyright];
	[self.context.undoManager setActionName:@"Undo copyright"]; //TODO
	
	if (_copyright) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_copyright = (id)obj;
}

- (GCCopyrightAttribute *)copyright
{
	return _copyright;
}


- (void)setGedcom:(id)obj
{
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setGedcom:_gedcom];
	[self.context.undoManager setActionName:@"Undo gedcom"]; //TODO
	
	if (_gedcom) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_gedcom = (id)obj;
}

- (GCGedcomAttribute *)gedcom
{
	return _gedcom;
}


- (void)setCharacterSet:(id)obj
{
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setCharacterSet:_characterSet];
	[self.context.undoManager setActionName:@"Undo characterSet"]; //TODO
	
	if (_characterSet) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_characterSet = (id)obj;
}

- (GCCharacterSetAttribute *)characterSet
{
	return _characterSet;
}


- (void)setLanguage:(id)obj
{
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setLanguage:_language];
	[self.context.undoManager setActionName:@"Undo language"]; //TODO
	
	if (_language) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_language = (id)obj;
}

- (GCLanguageAttribute *)language
{
	return _language;
}


- (void)setPlaceFormatSpecifier:(id)obj
{
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setPlaceFormatSpecifier:_placeFormatSpecifier];
	[self.context.undoManager setActionName:@"Undo placeFormatSpecifier"]; //TODO
	
	if (_placeFormatSpecifier) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_placeFormatSpecifier = (id)obj;
}

- (GCPlaceFormatSpecifierAttribute *)placeFormatSpecifier
{
	return _placeFormatSpecifier;
}


- (void)setNoteEmbedded:(id)obj
{
	[(GCHeaderEntity *)[self.context.undoManager prepareWithInvocationTarget:self] setNoteEmbedded:_noteEmbedded];
	[self.context.undoManager setActionName:@"Undo noteEmbedded"]; //TODO
	
	if (_noteEmbedded) {
		[obj setValue:nil forKey:@"describedObject"];
	}
	
	if ([obj valueForKey:@"describedObject"]) {
		[((GCObject *)[obj valueForKey:@"describedObject"]).mutableProperties removeObject:obj];
	}
	
	[obj setValue:self forKey:@"describedObject"];
	
	_noteEmbedded = (id)obj;
}

- (GCNoteEmbeddedAttribute *)noteEmbedded
{
	return _noteEmbedded;
}


@end

